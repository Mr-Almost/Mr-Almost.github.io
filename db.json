{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/favicon.ico.png","path":"favicon.ico.png","modified":0,"renderable":0},{"_id":"themes/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"4789e07aff7340afeeddc42a6642226bd327ccf2","modified":1524213499061},{"_id":"source/favicon.ico.png","hash":"248600c4b2aace789401640e1a8778dfd015ec9c","modified":1524213499061},{"_id":"themes/hexo-theme-next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1524216931010},{"_id":"themes/hexo-theme-next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1524216931010},{"_id":"themes/hexo-theme-next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1524216931010},{"_id":"themes/hexo-theme-next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1524216931013},{"_id":"themes/hexo-theme-next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1524216931014},{"_id":"themes/hexo-theme-next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1524216931015},{"_id":"themes/hexo-theme-next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1524216931015},{"_id":"themes/hexo-theme-next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1524216931015},{"_id":"themes/hexo-theme-next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1524216931016},{"_id":"themes/hexo-theme-next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1524216931017},{"_id":"themes/hexo-theme-next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1524216931017},{"_id":"themes/hexo-theme-next/README.md","hash":"8ce60ce578963eb4e1eb5e33e1efc2fc4779af9c","modified":1524216931018},{"_id":"themes/hexo-theme-next/_config.yml","hash":"5ff37e90e4d6812c8fc40c03fa6e1d903d743470","modified":1524217830279},{"_id":"themes/hexo-theme-next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1524216931019},{"_id":"themes/hexo-theme-next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1524216931020},{"_id":"themes/hexo-theme-next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1524216931073},{"_id":"source/_posts/git备份博客.md","hash":"8bba0e55c581b2f9afc7fcfe9b31b6897f28bada","modified":1525186874695},{"_id":"source/_posts/html标签.md","hash":"4ce23f79aa50aca0dd05bc88a6a82d0ea4e7909a","modified":1525347509976},{"_id":"source/_posts/一个梦.md","hash":"2994aee23ae952ac9d69db5f05d7d9819adee544","modified":1525186756470},{"_id":"source/_posts/从输入url到页面实现的过程.md","hash":"01c1aebed3f41311173537c003e6bfffc92a32c6","modified":1525191229669},{"_id":"source/_posts/利用hexo-github-pages搭建个人博客 - 副本.md","hash":"945e96f92fc2c8db84424cc5603c9692e4036eed","modified":1525186893168},{"_id":"source/_posts/命令行与脚本.md","hash":"bbd8eed0dd4257790fa2659be39e99606db27403","modified":1525188837749},{"_id":"source/_posts/实习第二周.md","hash":"54240a8c6ecb0ed398204558ece7f367a706618d","modified":1527387366809},{"_id":"source/_posts/开博大吉.md","hash":"451f3e6e55d3b4fb8ee02b5a4e24218b216afeb2","modified":1526482871287},{"_id":"source/_posts/服务器.md","hash":"46c957fa5938bfe99433b458a1d17dd356c215a3","modified":1525347083944},{"_id":"source/_posts/配置github.md","hash":"0cf28478a97719409bd52c36484efb9f5fa1b4cc","modified":1526483092306},{"_id":"source/guestbook/index.md","hash":"2a218a105b9cb7bc6bf22bad218c59e9db745a96","modified":1524213499061},{"_id":"source/tags/index.md","hash":"f37eb9029c9f653c0427422dcbce12c9828872a7","modified":1524213499077},{"_id":"themes/hexo-theme-next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1524216930996},{"_id":"themes/hexo-theme-next/.git/config","hash":"3c52580a91e569a8fde0f130818e4337f8bafd7c","modified":1524216931004},{"_id":"themes/hexo-theme-next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1524216099161},{"_id":"themes/hexo-theme-next/.git/index","hash":"2ca39dd919de9befb36da9140675f587f61751ee","modified":1524218077055},{"_id":"themes/hexo-theme-next/.git/packed-refs","hash":"69237944e31c16fe545d1f47b0b1e5b1d99660da","modified":1524216930980},{"_id":"themes/hexo-theme-next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1524216931011},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1524216931012},{"_id":"themes/hexo-theme-next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1524216931012},{"_id":"themes/hexo-theme-next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1524216931013},{"_id":"themes/hexo-theme-next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1524216931021},{"_id":"themes/hexo-theme-next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1524216931022},{"_id":"themes/hexo-theme-next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1524216931021},{"_id":"themes/hexo-theme-next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1524216931022},{"_id":"themes/hexo-theme-next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1524216931023},{"_id":"themes/hexo-theme-next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1524216931023},{"_id":"themes/hexo-theme-next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1524216931024},{"_id":"themes/hexo-theme-next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1524216931025},{"_id":"themes/hexo-theme-next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1524216931026},{"_id":"themes/hexo-theme-next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1524216931026},{"_id":"themes/hexo-theme-next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1524216931027},{"_id":"themes/hexo-theme-next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1524216931028},{"_id":"themes/hexo-theme-next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1524216931028},{"_id":"themes/hexo-theme-next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1524216931029},{"_id":"themes/hexo-theme-next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1524216931029},{"_id":"themes/hexo-theme-next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1524216931030},{"_id":"themes/hexo-theme-next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1524216931032},{"_id":"themes/hexo-theme-next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1524216931070},{"_id":"themes/hexo-theme-next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1524216931070},{"_id":"themes/hexo-theme-next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1524216931070},{"_id":"themes/hexo-theme-next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1524216931071},{"_id":"themes/hexo-theme-next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1524216931071},{"_id":"themes/hexo-theme-next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1524216931072},{"_id":"themes/hexo-theme-next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1524216931072},{"_id":"themes/hexo-theme-next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1524216931073},{"_id":"themes/hexo-theme-next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1524216931074},{"_id":"themes/hexo-theme-next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1524216931293},{"_id":"themes/hexo-theme-next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1524216931294},{"_id":"themes/hexo-theme-next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1524216931293},{"_id":"themes/hexo-theme-next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524216931133},{"_id":"themes/hexo-theme-next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1524216099162},{"_id":"themes/hexo-theme-next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1524216099162},{"_id":"themes/hexo-theme-next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1524216099163},{"_id":"themes/hexo-theme-next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1524216099163},{"_id":"themes/hexo-theme-next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1524216099163},{"_id":"themes/hexo-theme-next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1524216099164},{"_id":"themes/hexo-theme-next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1524216099165},{"_id":"themes/hexo-theme-next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1524216099165},{"_id":"themes/hexo-theme-next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1524216099165},{"_id":"themes/hexo-theme-next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1524216099166},{"_id":"themes/hexo-theme-next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1524216099166},{"_id":"themes/hexo-theme-next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1524216099167},{"_id":"themes/hexo-theme-next/.git/logs/HEAD","hash":"1989fa9ca9feab3c66566205ef8e4550742dbe03","modified":1524216930999},{"_id":"themes/hexo-theme-next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1524216931031},{"_id":"themes/hexo-theme-next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1524216931031},{"_id":"themes/hexo-theme-next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1524216931033},{"_id":"themes/hexo-theme-next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1524216931034},{"_id":"themes/hexo-theme-next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1524216931033},{"_id":"themes/hexo-theme-next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1524216931034},{"_id":"themes/hexo-theme-next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1524216931035},{"_id":"themes/hexo-theme-next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1524216931036},{"_id":"themes/hexo-theme-next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1524216931037},{"_id":"themes/hexo-theme-next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1524216931037},{"_id":"themes/hexo-theme-next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1524216931038},{"_id":"themes/hexo-theme-next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1524216931040},{"_id":"themes/hexo-theme-next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1524216931041},{"_id":"themes/hexo-theme-next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1524216931042},{"_id":"themes/hexo-theme-next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1524216931042},{"_id":"themes/hexo-theme-next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1524216931047},{"_id":"themes/hexo-theme-next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1524216931047},{"_id":"themes/hexo-theme-next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1524216931051},{"_id":"themes/hexo-theme-next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1524216931062},{"_id":"themes/hexo-theme-next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1524216931063},{"_id":"themes/hexo-theme-next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1524216931063},{"_id":"themes/hexo-theme-next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1524216931064},{"_id":"themes/hexo-theme-next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1524216931064},{"_id":"themes/hexo-theme-next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1524216931066},{"_id":"themes/hexo-theme-next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1524216931066},{"_id":"themes/hexo-theme-next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1524216931076},{"_id":"themes/hexo-theme-next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1524216931076},{"_id":"themes/hexo-theme-next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1524216931076},{"_id":"themes/hexo-theme-next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1524216931076},{"_id":"themes/hexo-theme-next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1524216931076},{"_id":"themes/hexo-theme-next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1524216931076},{"_id":"themes/hexo-theme-next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1524216931078},{"_id":"themes/hexo-theme-next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1524216931078},{"_id":"themes/hexo-theme-next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1524216931078},{"_id":"themes/hexo-theme-next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1524216931132},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1524216931133},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1524216931134},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1524216931134},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1524216931134},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1524216931135},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1524216931136},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1524216931136},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1524216931137},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1524216931137},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1524216931138},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1524216931138},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1524216931138},{"_id":"themes/hexo-theme-next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1524216931139},{"_id":"themes/hexo-theme-next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1524216931139},{"_id":"themes/hexo-theme-next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1524216931139},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1524216931140},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1524216931140},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1524216931141},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524216931049},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524216931050},{"_id":"themes/hexo-theme-next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524216931117},{"_id":"themes/hexo-theme-next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524216931117},{"_id":"themes/hexo-theme-next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524216931118},{"_id":"themes/hexo-theme-next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524216931131},{"_id":"themes/hexo-theme-next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524216931132},{"_id":"themes/hexo-theme-next/.git/refs/heads/master","hash":"7999da428ebb87e5a2b27315d8d5123c1ccdfaa5","modified":1524216930998},{"_id":"themes/hexo-theme-next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1524216931039},{"_id":"themes/hexo-theme-next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1524216931040},{"_id":"themes/hexo-theme-next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1524216931043},{"_id":"themes/hexo-theme-next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1524216931044},{"_id":"themes/hexo-theme-next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1524216931044},{"_id":"themes/hexo-theme-next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1524216931045},{"_id":"themes/hexo-theme-next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1524216931045},{"_id":"themes/hexo-theme-next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1524216931046},{"_id":"themes/hexo-theme-next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1524216931046},{"_id":"themes/hexo-theme-next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1524216931048},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1524216931049},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1524216931050},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1524216931052},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1524216931052},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1524216931053},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1524216931053},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1524216931053},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1524216931054},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1524216931055},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1524216931055},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1524216931056},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1524216931056},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1524216931057},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1524216931057},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1524216931057},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1524216931058},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1524216931058},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1524216931059},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1524216931059},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1524216931059},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1524216931060},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1524216931061},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1524216931061},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1524216931062},{"_id":"themes/hexo-theme-next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1524216931068},{"_id":"themes/hexo-theme-next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1524216931068},{"_id":"themes/hexo-theme-next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1524216931068},{"_id":"themes/hexo-theme-next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1524216931069},{"_id":"themes/hexo-theme-next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1524216931116},{"_id":"themes/hexo-theme-next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1524216931117},{"_id":"themes/hexo-theme-next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1524216931118},{"_id":"themes/hexo-theme-next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1524216931118},{"_id":"themes/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1524216931130},{"_id":"themes/hexo-theme-next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1524216931130},{"_id":"themes/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1524216931131},{"_id":"themes/hexo-theme-next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1524216931132},{"_id":"themes/hexo-theme-next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1524216931141},{"_id":"themes/hexo-theme-next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1524216931142},{"_id":"themes/hexo-theme-next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1524216931142},{"_id":"themes/hexo-theme-next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1524216931143},{"_id":"themes/hexo-theme-next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1524216931144},{"_id":"themes/hexo-theme-next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1524216931144},{"_id":"themes/hexo-theme-next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1524216931146},{"_id":"themes/hexo-theme-next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1524216931146},{"_id":"themes/hexo-theme-next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1524216931147},{"_id":"themes/hexo-theme-next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1524216931148},{"_id":"themes/hexo-theme-next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1524216931148},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1524216931211},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1524216931216},{"_id":"themes/hexo-theme-next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1524216931217},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1524216931218},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1524216931218},{"_id":"themes/hexo-theme-next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1524216931230},{"_id":"themes/hexo-theme-next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1524216931231},{"_id":"themes/hexo-theme-next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1524216931232},{"_id":"themes/hexo-theme-next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1524216931232},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1524216931236},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1524216931237},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1524216931238},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1524216931239},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1524216931240},{"_id":"themes/hexo-theme-next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1524216931259},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1524216931262},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1524216931262},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1524216931263},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1524216931263},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1524216931264},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1524216931266},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1524216931267},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1524216931267},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1524216931269},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1524216931269},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1524216931270},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1524216931271},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1524216931271},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1524216931272},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1524216931273},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1524216931273},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1524216931274},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1524216931274},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1524216931275},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1524216931275},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1524216931276},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1524216931276},{"_id":"themes/hexo-theme-next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1524216931277},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1524216931278},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1524216931279},{"_id":"themes/hexo-theme-next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1524216931279},{"_id":"themes/hexo-theme-next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1524216931286},{"_id":"themes/hexo-theme-next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1524216931287},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1524216931290},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1524216931291},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1524216931292},{"_id":"themes/hexo-theme-next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1524216931261},{"_id":"themes/hexo-theme-next/.git/logs/refs/heads/master","hash":"1989fa9ca9feab3c66566205ef8e4550742dbe03","modified":1524216931000},{"_id":"themes/hexo-theme-next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1524216930994},{"_id":"themes/hexo-theme-next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1524216931067},{"_id":"themes/hexo-theme-next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1524216931067},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1524216931081},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1524216931081},{"_id":"themes/hexo-theme-next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1524216931081},{"_id":"themes/hexo-theme-next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1524216931081},{"_id":"themes/hexo-theme-next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1524216931081},{"_id":"themes/hexo-theme-next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1524216931090},{"_id":"themes/hexo-theme-next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1524216931103},{"_id":"themes/hexo-theme-next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1524216931113},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1524216931114},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1524216931114},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1524216931115},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1524216931115},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1524216931116},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1524216931116},{"_id":"themes/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1524216931119},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1524216931120},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1524216931121},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1524216931121},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1524216931121},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1524216931122},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1524216931122},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1524216931123},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1524216931125},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1524216931125},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1524216931126},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1524216931126},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1524216931126},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1524216931127},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1524216931128},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1524216931128},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1524216931128},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1524216931129},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1524216931129},{"_id":"themes/hexo-theme-next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1524216931147},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1524216931207},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1524216931210},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1524216931210},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1524216931219},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1524216931220},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1524216931220},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1524216931221},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1524216931221},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1524216931223},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1524216931228},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1524216931228},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1524216931229},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1524216931233},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1524216931234},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1524216931241},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1524216931242},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1524216931243},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1524216931285},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1524216931286},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1524216931208},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1524216931257},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1524216931258},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1524216931289},{"_id":"themes/hexo-theme-next/.git/logs/refs/remotes/origin/HEAD","hash":"1989fa9ca9feab3c66566205ef8e4550742dbe03","modified":1524216930994},{"_id":"themes/hexo-theme-next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1524216931083},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1524216931085},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1524216931085},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1524216931085},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1524216931085},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1524216931085},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1524216931087},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1524216931087},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1524216931087},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1524216931087},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1524216931087},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1524216931089},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1524216931089},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1524216931089},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1524216931090},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1524216931091},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1524216931091},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1524216931091},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1524216931092},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1524216931093},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1524216931093},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1524216931093},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1524216931094},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1524216931094},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1524216931094},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1524216931095},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1524216931095},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1524216931096},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1524216931096},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1524216931096},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1524216931097},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1524216931097},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1524216931098},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1524216931098},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1524216931101},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1524216931101},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1524216931101},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1524216931102},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1524216931102},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1524216931103},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1524216931104},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1524216931104},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1524216931104},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1524216931105},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1524216931106},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1524216931106},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1524216931107},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1524216931107},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1524216931107},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1524216931108},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1524216931108},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1524216931109},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1524216931109},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1524216931111},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1524216931112},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1524216931112},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1524216931113},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1524216931113},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1524216931124},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1524216931124},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1524216931127},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1524216931203},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1524216931204},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1524216931205},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1524216931205},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1524216931206},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1524216931223},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1524216931224},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1524216931225},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1524216931225},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1524216931226},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1524216931227},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1524216931246},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1524216931249},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1524216931256},{"_id":"themes/hexo-theme-next/.git/objects/pack/pack-4a376867f92a55cc1eff78dd206b449049df8e30.idx","hash":"5d82e4a6963dfe724c3089c59327e82e9d35f246","modified":1524216930161},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1524216931215},{"_id":"themes/hexo-theme-next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1524216931284},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1524216931253},{"_id":"themes/hexo-theme-next/.git/objects/pack/pack-4a376867f92a55cc1eff78dd206b449049df8e30.pack","hash":"9b960c80f1ec4d36aa534a86efe48883d7046fb8","modified":1524216930294},{"_id":"public/guestbook/index.html","hash":"27453a5eb2df61ea9b74ec9aa343e6be924ad532","modified":1527386818978},{"_id":"public/tags/index.html","hash":"8c401421a34d836059d348193d24d9f91737b608","modified":1527386818979},{"_id":"public/2018/04/19/一个梦/index.html","hash":"4658723d83f39a7f2c07698181724498506b57c9","modified":1527386818979},{"_id":"public/2018/04/03/git备份博客/index.html","hash":"a5dc85d9ea0f6c1f6ded05cdf33f1eab7e6b6694","modified":1527386818979},{"_id":"public/2018/03/23/配置github/index.html","hash":"d892a0105beb31bb03a4c9738a23ec785c442b83","modified":1527386818979},{"_id":"public/2018/03/22/开博大吉/index.html","hash":"19a783514fac48eb775f1f7478de81ca709ceea7","modified":1527386818979},{"_id":"public/archives/index.html","hash":"7a4c7c3524fc6e1bcda1b0787336daad6e99071b","modified":1527386818979},{"_id":"public/archives/2018/index.html","hash":"5bb80c53d74582d0550b8c14129534504ba009e2","modified":1527386818980},{"_id":"public/archives/2018/03/index.html","hash":"1de6d9389b01057ea60539f2a878dab0842a83ee","modified":1527386818980},{"_id":"public/archives/2018/04/index.html","hash":"ba3e7506ddfc5539c6765cd3c337fab950606df6","modified":1527386818980},{"_id":"public/archives/2018/05/index.html","hash":"88fc2e68b8af000e4b5165d19ba2171b735b0c93","modified":1527386818980},{"_id":"public/2018/04/06/html标签/index.html","hash":"ace7ac725593ceb6aaf48ec53d8f3e9bebdb4955","modified":1527386818980},{"_id":"public/2018/04/06/服务器/index.html","hash":"733ff5b46d52c6c0b24c3deb6e6d63f23eafbcb3","modified":1527386818980},{"_id":"public/2018/04/05/从输入url到页面实现的过程/index.html","hash":"cdee28f56e73b4e46d65e1993d9988fad9edd272","modified":1527386818980},{"_id":"public/2018/04/04/命令行与脚本/index.html","hash":"d76456ec6f0f7e1b600818f664b01ee063d1c3e3","modified":1527386818980},{"_id":"public/2018/04/03/利用hexo-github-pages搭建个人博客 - 副本/index.html","hash":"10b48b8d0e71edd7a45d8b2fb17e4c6d2222c45d","modified":1527386818980},{"_id":"public/index.html","hash":"f619d9eafff2f79b64c1daec942487c7d2b9b167","modified":1527387379638},{"_id":"public/2018/05/24/实习第二周/index.html","hash":"e063a48e28f10d30dac69181e81c7e0156bf0898","modified":1527387379638},{"_id":"public/CNAME","hash":"4789e07aff7340afeeddc42a6642226bd327ccf2","modified":1527386818997},{"_id":"public/favicon.ico.png","hash":"248600c4b2aace789401640e1a8778dfd015ec9c","modified":1527386818997},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1527386818997},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1527386818997},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1527386818997},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1527386818997},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1527386818997},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1527386818997},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1527386818997},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1527386818997},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1527386818997},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1527386818997},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1527386818998},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1527386818998},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1527386818998},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1527386818998},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1527386818998},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1527386818998},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1527386818998},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1527386818998},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1527386818998},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1527386818998},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1527386818998},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1527386818998},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1527386818998},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1527386818998},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1527386818998},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1527386818998},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1527386818998},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1527386818998},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1527386818999},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1527386818999},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1527386818999},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1527386818999},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1527386818999},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1527386820198},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1527386820215},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1527386820238},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1527386820238},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1527386820238},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1527386820238},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1527386820238},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1527386820238},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1527386820238},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1527386820238},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1527386820238},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1527386820238},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1527386820238},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1527386820238},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1527386820238},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1527386820239},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1527386820239},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1527386820239},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1527386820239},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1527386820239},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1527386820239},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1527386820239},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1527386820239},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1527386820239},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1527386820239},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1527386820239},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1527386820239},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1527386820239},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1527386820239},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1527386820240},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1527386820240},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1527386820240},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1527386820240},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1527386820240},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1527386820240},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1527386820240},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1527386820240},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1527386820240},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1527386820240},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1527386820240},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1527386820240},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1527386820240},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1527386820240},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1527386820240},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1527386820240},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1527386820241},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1527386820241},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1527386820241},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1527386820241},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1527386820241},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1527386820241},{"_id":"public/css/main.css","hash":"b33232295a0ab2f075f8bfa9e885cf609c16c634","modified":1527386820241},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1527386820241},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1527386820241},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1527386820241},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1527386820241},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1527386820241},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1527386820241},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1527386820241},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1527386820242},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1527386820242},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1527386820242},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1527386820242},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1527386820242},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1527386820242},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1527386820242},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1527386820242},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1527386820242},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1527386820242},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1527386820243},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1527386820243},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1527386820243},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1527386820243},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1527386820244},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1527386820244},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1527386820285}],"Category":[],"Data":[],"Page":[{"title":"guestbook","date":"2018-04-17T13:50:45.000Z","_content":" <div class=\"ds-recent-visitors\" data-num-items=\"28\" data-avatar-size=\"42\" id=\"ds-recent-visitors\"></div>","source":"guestbook/index.md","raw":"---\ntitle: guestbook\ndate: 2018-04-17 21:50:45\n---\n <div class=\"ds-recent-visitors\" data-num-items=\"28\" data-avatar-size=\"42\" id=\"ds-recent-visitors\"></div>","updated":"2018-04-20T08:38:19.061Z","path":"guestbook/index.html","comments":1,"layout":"page","_id":"cjho6oan10001v4vmyxdjqcx0","content":" <div class=\"ds-recent-visitors\" data-num-items=\"28\" data-avatar-size=\"42\" id=\"ds-recent-visitors\"></div>","site":{"data":{}},"excerpt":"","more":" <div class=\"ds-recent-visitors\" data-num-items=\"28\" data-avatar-size=\"42\" id=\"ds-recent-visitors\"></div>"},{"title":"tags","date":"2018-04-17T05:51:11.000Z","type":"tag","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-04-17 13:51:11\ntype: \"tag\"\ncomments: false\n---\n","updated":"2018-04-20T08:38:19.077Z","path":"tags/index.html","layout":"page","_id":"cjho6oan60003v4vmtje738xq","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"html标签","date":"2018-04-06T14:02:22.000Z","_content":"<div class=\"RichText Post-RichText\">\n\n从接触前端到现在整整一个月。总结一下自己学了什么吧：\n\n命令行，http，数据结构，html，css，js，DOM，然后就是jQuery。\n\n因为太懒了...所以一直没有更新..现在要加把劲了！\n\n* * *\n\n由于DOM的API非常难记...而且不便利，所以作为优化DOM的jQuery出现了。\n\n那一个jQuery的API是怎么实现的呢？\n\n在我理解看来，jQuery也是基于DOM的API实现，只是封装集成了一起，通过 $('___') 函数 + 事件绑定实现。\n\n那我们自己实现一下以下功能：\n<div class=\"highlight\">\n\n    <span></span>var $div = $('div')    //输入div\n    $div.addClass('red')  // 可将所有 div 的 class 添加一个 red\n    $div.setText('hi')  // 可将所有 div 的 textContent 变为 hi\n    `</pre></div>\n\n    也就是说输入div标签名，所有div都会被执行，而且可以addClass还有setText。\n\n    ## **第一：传递参数**\n    <div class=\"highlight\"><pre>`<span></span>var $div = $('div')  \n    `</pre></div>\n\n    要实现上面这个功能，我的理解是首先设置window对象jQuery为函数返回的结果，然后把参数'div'传递到函数内的DOM，作为变量进行下一步的操作。\n    <div class=\"highlight\"><pre>`<span></span><span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">jQuery</span><span class=\"o\">=</span><span class=\"kd\">function</span><span class=\"err\">（</span><span class=\"nx\">selector</span><span class=\"err\">）</span><span class=\"p\">{</span>  \n    <span class=\"kd\">let</span> <span class=\"nx\">alldiv</span><span class=\"o\">=</span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelectorAll</span><span class=\"p\">(</span><span class=\"nx\">selector</span><span class=\"p\">)</span>  \n    <span class=\"p\">}</span>\n\n    <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">$</span> <span class=\"o\">=</span> <span class=\"nx\">jQuery</span>\n    `</pre></div>\n\n    ## **第二：返回对象**\n    <div class=\"highlight\"><pre>`<span></span>$div.addClass('red')  // 可将所有 div 的 class 添加一个 red\n    $div.setText('hi')  // 可将所有 div 的 textContent 变为 hi\n    `</pre></div>\n\n    可以观察得到$div是一个对象，它的key有addClass和setText。\n\n    那我也返回一个含有addClass和setClass的对象。\n    <div class=\"highlight\"><pre>`<span></span><span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">jQuery</span><span class=\"o\">=</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">selector</span><span class=\"p\">){</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">alldiv</span><span class=\"o\">=</span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelectorAll</span><span class=\"p\">(</span><span class=\"nx\">selector</span><span class=\"p\">)</span>  \n      <span class=\"k\">return</span><span class=\"p\">{</span>\n           <span class=\"nx\">addClass</span><span class=\"o\">:</span><span class=\"kd\">function</span> <span class=\"p\">(){},</span>\n           <span class=\"nx\">setClass</span><span class=\"err\">：</span><span class=\"kd\">function</span><span class=\"p\">(){}</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">$</span> <span class=\"o\">=</span> <span class=\"nx\">jQuery</span>\n    `</pre></div>\n\n    ## **第三：补全对象的key**\n\n    我们得到了alldiv，它是一个伪数组。如果每个div都要添加class的话，需要一个for循环，然后每一次用DOM的方法里的classList.add功能对div添加class。\n    <div class=\"highlight\"><pre>`<span></span><span class=\"nx\">addClass</span><span class=\"o\">:</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n                   <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"nx\">i</span><span class=\"o\">&lt;</span><span class=\"nx\">alldiv</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span><span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n                       <span class=\"nx\">alldiv</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">classList</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"s2\">\"red\"</span><span class=\"p\">)</span>\n                   <span class=\"p\">}</span>\n    `</pre></div>\n\n    同理有\n    <div class=\"highlight\"><pre>`<span></span><span class=\"nx\">setText</span><span class=\"o\">:</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n                   <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"nx\">i</span><span class=\"o\">&lt;</span><span class=\"nx\">alldiv</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span><span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n                      <span class=\"nx\">alldiv</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">textContent</span> <span class=\"o\">=</span> <span class=\"s2\">\"hi\"</span>\n                  <span class=\"p\">}</span>\n    `</pre></div>\n\n    把addClass和setText的内容结合到函数内，得到：\n    <div class=\"highlight\"><pre>`<span></span><span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">jQuery</span><span class=\"o\">=</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">selector</span><span class=\"p\">){</span>\n      <span class=\"kd\">let</span> <span class=\"nx\">alldiv</span><span class=\"o\">=</span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelectorAll</span><span class=\"p\">(</span><span class=\"nx\">selector</span><span class=\"p\">)</span>\n      <span class=\"k\">return</span><span class=\"p\">{</span>\n           <span class=\"nx\">addClass</span><span class=\"o\">:</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n                   <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"nx\">i</span><span class=\"o\">&lt;</span><span class=\"nx\">alldiv</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span><span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n                       <span class=\"nx\">alldiv</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">classList</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"s2\">\"red\"</span><span class=\"p\">)</span>\n                   <span class=\"p\">}</span>\n           <span class=\"p\">},</span>\n           <span class=\"nx\">setText</span><span class=\"o\">:</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n                   <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"nx\">i</span><span class=\"o\">&lt;</span><span class=\"nx\">alldiv</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span><span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n                      <span class=\"nx\">alldiv</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">textContent</span> <span class=\"o\">=</span> <span class=\"s2\">\"hi\"</span>\n                  <span class=\"p\">}</span>\n          <span class=\"p\">}</span>\n       <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">$</span> <span class=\"o\">=</span> <span class=\"nx\">jQuery</span>\n\n</div>\n\n## **总结**\n\n以上代码实现一个 jQuery 的 API。\n</div>","source":"_posts/html标签.md","raw":"---\ntitle: html标签\ndate: 2018-04-6 22:02:22\ntags:\n---\n<div class=\"RichText Post-RichText\">\n\n从接触前端到现在整整一个月。总结一下自己学了什么吧：\n\n命令行，http，数据结构，html，css，js，DOM，然后就是jQuery。\n\n因为太懒了...所以一直没有更新..现在要加把劲了！\n\n* * *\n\n由于DOM的API非常难记...而且不便利，所以作为优化DOM的jQuery出现了。\n\n那一个jQuery的API是怎么实现的呢？\n\n在我理解看来，jQuery也是基于DOM的API实现，只是封装集成了一起，通过 $('___') 函数 + 事件绑定实现。\n\n那我们自己实现一下以下功能：\n<div class=\"highlight\">\n\n    <span></span>var $div = $('div')    //输入div\n    $div.addClass('red')  // 可将所有 div 的 class 添加一个 red\n    $div.setText('hi')  // 可将所有 div 的 textContent 变为 hi\n    `</pre></div>\n\n    也就是说输入div标签名，所有div都会被执行，而且可以addClass还有setText。\n\n    ## **第一：传递参数**\n    <div class=\"highlight\"><pre>`<span></span>var $div = $('div')  \n    `</pre></div>\n\n    要实现上面这个功能，我的理解是首先设置window对象jQuery为函数返回的结果，然后把参数'div'传递到函数内的DOM，作为变量进行下一步的操作。\n    <div class=\"highlight\"><pre>`<span></span><span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">jQuery</span><span class=\"o\">=</span><span class=\"kd\">function</span><span class=\"err\">（</span><span class=\"nx\">selector</span><span class=\"err\">）</span><span class=\"p\">{</span>  \n    <span class=\"kd\">let</span> <span class=\"nx\">alldiv</span><span class=\"o\">=</span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelectorAll</span><span class=\"p\">(</span><span class=\"nx\">selector</span><span class=\"p\">)</span>  \n    <span class=\"p\">}</span>\n\n    <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">$</span> <span class=\"o\">=</span> <span class=\"nx\">jQuery</span>\n    `</pre></div>\n\n    ## **第二：返回对象**\n    <div class=\"highlight\"><pre>`<span></span>$div.addClass('red')  // 可将所有 div 的 class 添加一个 red\n    $div.setText('hi')  // 可将所有 div 的 textContent 变为 hi\n    `</pre></div>\n\n    可以观察得到$div是一个对象，它的key有addClass和setText。\n\n    那我也返回一个含有addClass和setClass的对象。\n    <div class=\"highlight\"><pre>`<span></span><span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">jQuery</span><span class=\"o\">=</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">selector</span><span class=\"p\">){</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">alldiv</span><span class=\"o\">=</span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelectorAll</span><span class=\"p\">(</span><span class=\"nx\">selector</span><span class=\"p\">)</span>  \n      <span class=\"k\">return</span><span class=\"p\">{</span>\n           <span class=\"nx\">addClass</span><span class=\"o\">:</span><span class=\"kd\">function</span> <span class=\"p\">(){},</span>\n           <span class=\"nx\">setClass</span><span class=\"err\">：</span><span class=\"kd\">function</span><span class=\"p\">(){}</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">$</span> <span class=\"o\">=</span> <span class=\"nx\">jQuery</span>\n    `</pre></div>\n\n    ## **第三：补全对象的key**\n\n    我们得到了alldiv，它是一个伪数组。如果每个div都要添加class的话，需要一个for循环，然后每一次用DOM的方法里的classList.add功能对div添加class。\n    <div class=\"highlight\"><pre>`<span></span><span class=\"nx\">addClass</span><span class=\"o\">:</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n                   <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"nx\">i</span><span class=\"o\">&lt;</span><span class=\"nx\">alldiv</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span><span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n                       <span class=\"nx\">alldiv</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">classList</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"s2\">\"red\"</span><span class=\"p\">)</span>\n                   <span class=\"p\">}</span>\n    `</pre></div>\n\n    同理有\n    <div class=\"highlight\"><pre>`<span></span><span class=\"nx\">setText</span><span class=\"o\">:</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n                   <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"nx\">i</span><span class=\"o\">&lt;</span><span class=\"nx\">alldiv</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span><span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n                      <span class=\"nx\">alldiv</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">textContent</span> <span class=\"o\">=</span> <span class=\"s2\">\"hi\"</span>\n                  <span class=\"p\">}</span>\n    `</pre></div>\n\n    把addClass和setText的内容结合到函数内，得到：\n    <div class=\"highlight\"><pre>`<span></span><span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">jQuery</span><span class=\"o\">=</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">selector</span><span class=\"p\">){</span>\n      <span class=\"kd\">let</span> <span class=\"nx\">alldiv</span><span class=\"o\">=</span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelectorAll</span><span class=\"p\">(</span><span class=\"nx\">selector</span><span class=\"p\">)</span>\n      <span class=\"k\">return</span><span class=\"p\">{</span>\n           <span class=\"nx\">addClass</span><span class=\"o\">:</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n                   <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"nx\">i</span><span class=\"o\">&lt;</span><span class=\"nx\">alldiv</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span><span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n                       <span class=\"nx\">alldiv</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">classList</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"s2\">\"red\"</span><span class=\"p\">)</span>\n                   <span class=\"p\">}</span>\n           <span class=\"p\">},</span>\n           <span class=\"nx\">setText</span><span class=\"o\">:</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n                   <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"nx\">i</span><span class=\"o\">&lt;</span><span class=\"nx\">alldiv</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span><span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n                      <span class=\"nx\">alldiv</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">textContent</span> <span class=\"o\">=</span> <span class=\"s2\">\"hi\"</span>\n                  <span class=\"p\">}</span>\n          <span class=\"p\">}</span>\n       <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">$</span> <span class=\"o\">=</span> <span class=\"nx\">jQuery</span>\n\n</div>\n\n## **总结**\n\n以上代码实现一个 jQuery 的 API。\n</div>","slug":"html标签","published":1,"updated":"2018-05-03T11:38:29.976Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjho6oamt0000v4vmvtqzl2nu","content":"<div class=\"RichText Post-RichText\"><br><br>从接触前端到现在整整一个月。总结一下自己学了什么吧：<br><br>命令行，http，数据结构，html，css，js，DOM，然后就是jQuery。<br><br>因为太懒了…所以一直没有更新..现在要加把劲了！<br><br><em> </em> *<br><br>由于DOM的API非常难记…而且不便利，所以作为优化DOM的jQuery出现了。<br><br>那一个jQuery的API是怎么实现的呢？<br><br>在我理解看来，jQuery也是基于DOM的API实现，只是封装集成了一起，通过 $(‘___’) 函数 + 事件绑定实现。<br><br>那我们自己实现一下以下功能：<br><div class=\"highlight\"><br><br>    <span></span>var $div = $(‘div’)    //输入div<br>    $div.addClass(‘red’)  // 可将所有 div 的 class 添加一个 red<br>    $div.setText(‘hi’)  // 可将所有 div 的 textContent 变为 hi<br>    `</div>\n\n<pre><code>也就是说输入div标签名，所有div都会被执行，而且可以addClass还有setText。\n\n## **第一：传递参数**\n&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;`&lt;span&gt;&lt;/span&gt;var $div = $(&apos;div&apos;)  \n`&lt;/pre&gt;&lt;/div&gt;\n\n要实现上面这个功能，我的理解是首先设置window对象jQuery为函数返回的结果，然后把参数&apos;div&apos;传递到函数内的DOM，作为变量进行下一步的操作。\n&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;`&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;jQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;（&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;）&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  \n&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;alldiv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  \n&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n\n&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jQuery&lt;/span&gt;\n`&lt;/pre&gt;&lt;/div&gt;\n\n## **第二：返回对象**\n&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;`&lt;span&gt;&lt;/span&gt;$div.addClass(&apos;red&apos;)  // 可将所有 div 的 class 添加一个 red\n$div.setText(&apos;hi&apos;)  // 可将所有 div 的 textContent 变为 hi\n`&lt;/pre&gt;&lt;/div&gt;\n\n可以观察得到$div是一个对象，它的key有addClass和setText。\n\n那我也返回一个含有addClass和setClass的对象。\n&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;`&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;jQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;\n&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;alldiv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  \n  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n       &lt;span class=&quot;nx&quot;&gt;addClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(){},&lt;/span&gt;\n       &lt;span class=&quot;nx&quot;&gt;setClass&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;：&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){}&lt;/span&gt;\n  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jQuery&lt;/span&gt;\n`&lt;/pre&gt;&lt;/div&gt;\n\n## **第三：补全对象的key**\n\n我们得到了alldiv，它是一个伪数组。如果每个div都要添加class的话，需要一个for循环，然后每一次用DOM的方法里的classList.add功能对div添加class。\n&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;`&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;\n               &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alldiv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;\n                   &lt;span class=&quot;nx&quot;&gt;alldiv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;classList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;red&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n               &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n`&lt;/pre&gt;&lt;/div&gt;\n\n同理有\n&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;`&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;\n               &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alldiv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;\n                  &lt;span class=&quot;nx&quot;&gt;alldiv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;textContent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hi&quot;&lt;/span&gt;\n              &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n`&lt;/pre&gt;&lt;/div&gt;\n\n把addClass和setText的内容结合到函数内，得到：\n&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;`&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;jQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;\n  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;alldiv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n       &lt;span class=&quot;nx&quot;&gt;addClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;\n               &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alldiv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;\n                   &lt;span class=&quot;nx&quot;&gt;alldiv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;classList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;red&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n               &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n       &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;\n       &lt;span class=&quot;nx&quot;&gt;setText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;\n               &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alldiv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;\n                  &lt;span class=&quot;nx&quot;&gt;alldiv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;textContent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hi&quot;&lt;/span&gt;\n              &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jQuery&lt;/span&gt;\n</code></pre><p></p></div><p></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><strong>总结</strong></h2><p>以上代码实现一个 jQuery 的 API。<br></p>\n","site":{"data":{}},"excerpt":"","more":"<div class=\"RichText Post-RichText\"><br><br>从接触前端到现在整整一个月。总结一下自己学了什么吧：<br><br>命令行，http，数据结构，html，css，js，DOM，然后就是jQuery。<br><br>因为太懒了…所以一直没有更新..现在要加把劲了！<br><br><em> </em> *<br><br>由于DOM的API非常难记…而且不便利，所以作为优化DOM的jQuery出现了。<br><br>那一个jQuery的API是怎么实现的呢？<br><br>在我理解看来，jQuery也是基于DOM的API实现，只是封装集成了一起，通过 $(‘___’) 函数 + 事件绑定实现。<br><br>那我们自己实现一下以下功能：<br><div class=\"highlight\"><br><br>    <span></span>var $div = $(‘div’)    //输入div<br>    $div.addClass(‘red’)  // 可将所有 div 的 class 添加一个 red<br>    $div.setText(‘hi’)  // 可将所有 div 的 textContent 变为 hi<br>    `</div>\n\n<pre><code>也就是说输入div标签名，所有div都会被执行，而且可以addClass还有setText。\n\n## **第一：传递参数**\n&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;`&lt;span&gt;&lt;/span&gt;var $div = $(&apos;div&apos;)  \n`&lt;/pre&gt;&lt;/div&gt;\n\n要实现上面这个功能，我的理解是首先设置window对象jQuery为函数返回的结果，然后把参数&apos;div&apos;传递到函数内的DOM，作为变量进行下一步的操作。\n&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;`&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;jQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;（&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;）&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  \n&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;alldiv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  \n&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n\n&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jQuery&lt;/span&gt;\n`&lt;/pre&gt;&lt;/div&gt;\n\n## **第二：返回对象**\n&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;`&lt;span&gt;&lt;/span&gt;$div.addClass(&apos;red&apos;)  // 可将所有 div 的 class 添加一个 red\n$div.setText(&apos;hi&apos;)  // 可将所有 div 的 textContent 变为 hi\n`&lt;/pre&gt;&lt;/div&gt;\n\n可以观察得到$div是一个对象，它的key有addClass和setText。\n\n那我也返回一个含有addClass和setClass的对象。\n&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;`&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;jQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;\n&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;alldiv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  \n  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n       &lt;span class=&quot;nx&quot;&gt;addClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(){},&lt;/span&gt;\n       &lt;span class=&quot;nx&quot;&gt;setClass&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;：&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){}&lt;/span&gt;\n  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jQuery&lt;/span&gt;\n`&lt;/pre&gt;&lt;/div&gt;\n\n## **第三：补全对象的key**\n\n我们得到了alldiv，它是一个伪数组。如果每个div都要添加class的话，需要一个for循环，然后每一次用DOM的方法里的classList.add功能对div添加class。\n&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;`&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;\n               &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alldiv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;\n                   &lt;span class=&quot;nx&quot;&gt;alldiv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;classList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;red&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n               &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n`&lt;/pre&gt;&lt;/div&gt;\n\n同理有\n&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;`&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;\n               &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alldiv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;\n                  &lt;span class=&quot;nx&quot;&gt;alldiv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;textContent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hi&quot;&lt;/span&gt;\n              &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n`&lt;/pre&gt;&lt;/div&gt;\n\n把addClass和setText的内容结合到函数内，得到：\n&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;`&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;jQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;\n  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;alldiv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n       &lt;span class=&quot;nx&quot;&gt;addClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;\n               &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alldiv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;\n                   &lt;span class=&quot;nx&quot;&gt;alldiv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;classList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;red&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n               &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n       &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;\n       &lt;span class=&quot;nx&quot;&gt;setText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;\n               &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alldiv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;\n                  &lt;span class=&quot;nx&quot;&gt;alldiv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;textContent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hi&quot;&lt;/span&gt;\n              &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jQuery&lt;/span&gt;\n</code></pre><p></p></div><p></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><strong>总结</strong></h2><p>以上代码实现一个 jQuery 的 API。<br></p>\n"},{"title":"git备份博客","date":"2018-04-03T07:35:05.000Z","_content":"1.gitbash的位置定位到git指向username.github.io的文件夹，把博客代码放在这里\n2.创建分支hexo，把博客的代码上传到这个分支\n```\ngit branch hexo\ngit checkout hexo\ngit add .\ngit commit -m \"blog\"\ngit push origin hexo\n```\n3.在setting–Branches–Default branch中将backup设置为默认的分支，这样git push时就会push到这个分支上\n4.对博客进行更新\n```\n依次执行git add . 、 git commit -m \"some message\" 、 git push推送源文件\n执行hexo g -d 生成部署博客\n```","source":"_posts/git备份博客.md","raw":"---\ntitle: git备份博客\ndate: 2018-04-03 15:35:05\ntags:\n---\n1.gitbash的位置定位到git指向username.github.io的文件夹，把博客代码放在这里\n2.创建分支hexo，把博客的代码上传到这个分支\n```\ngit branch hexo\ngit checkout hexo\ngit add .\ngit commit -m \"blog\"\ngit push origin hexo\n```\n3.在setting–Branches–Default branch中将backup设置为默认的分支，这样git push时就会push到这个分支上\n4.对博客进行更新\n```\n依次执行git add . 、 git commit -m \"some message\" 、 git push推送源文件\n执行hexo g -d 生成部署博客\n```","slug":"git备份博客","published":1,"updated":"2018-05-01T15:01:14.695Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjho6oan30002v4vm8i2w21q2","content":"<p>1.gitbash的位置定位到git指向username.github.io的文件夹，把博客代码放在这里<br>2.创建分支hexo，把博客的代码上传到这个分支<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch hexo</span><br><span class=\"line\">git checkout hexo</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;blog&quot;</span><br><span class=\"line\">git push origin hexo</span><br></pre></td></tr></table></figure></p>\n<p>3.在setting–Branches–Default branch中将backup设置为默认的分支，这样git push时就会push到这个分支上<br>4.对博客进行更新<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">依次执行git add . 、 git commit -m &quot;some message&quot; 、 git push推送源文件</span><br><span class=\"line\">执行hexo g -d 生成部署博客</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>1.gitbash的位置定位到git指向username.github.io的文件夹，把博客代码放在这里<br>2.创建分支hexo，把博客的代码上传到这个分支<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch hexo</span><br><span class=\"line\">git checkout hexo</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;blog&quot;</span><br><span class=\"line\">git push origin hexo</span><br></pre></td></tr></table></figure></p>\n<p>3.在setting–Branches–Default branch中将backup设置为默认的分支，这样git push时就会push到这个分支上<br>4.对博客进行更新<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">依次执行git add . 、 git commit -m &quot;some message&quot; 、 git push推送源文件</span><br><span class=\"line\">执行hexo g -d 生成部署博客</span><br></pre></td></tr></table></figure></p>\n"},{"title":"一个梦","date":"2018-04-19T10:02:22.000Z","_content":"今天做了一个很难过的梦，我忍不住记下来：\n梦里我住着一个小区\n小区周围的小孩时不时地会失踪\n但庆幸的是他们总会自己走回来\n然而他们回来的时候眼睛变得呆滞，笑容僵硬，行动也很奇怪\n他们爸妈很开心找到自己的小孩但是又非常心疼一点办法都没有\n从此就很少见那些小孩出门\n渐渐地小区的人越来越少\n我也是小区里的一个小孩，刷朋友圈看到有人卖广告\n点进去发现这个广告是说线下排队玩游戏拿小猪佩奇的\n然后我就想这绝对是个骗人的玩意，但是还是去了（？？？为什么呢）\n线下排队人非常多，绕着一圈又一圈\n然后这个广告商非常神奇，他们有操控下雨的能力，那些雨都是齐刷刷地往不同方向下的\n他们玩游戏的通关方式是要躲避操控的雨不被淋湿\n没躲过雨的人当然就会全身湿透，然后他们会提供一个换衣服的地方\n很有意思的是，我进去换衣服，门一关，就出不来了\n我怎么喊都没人应，意识到自己被拐了，非常害怕\n过了两天，房间里面有个对讲机它有声音了\n监狱外面的人说要用对讲机教我武功\n学会了就放我出来\n我还很开心，诶呦还有武功学\n过了三个月，我学会了\n这个武功也非常厉害，他们的机器配合上我的武功可以复制出五个我\n那些被复制的我看起来就非常呆滞\n他们把其中一个送回到我的家里\n剩下三个留了下来做苦力\n然后我就被放了，给了几千\n我意识到这就是梦里一开始那个拐卖小孩的集团\n小区的家长看到的都是被复制的小孩\n所以我努力凑钱\n过了三年终于回到家乡\n发现家已经搬走\n我再也找不到爸妈\n估计家里那个被复制的我已代替着我活了下来","source":"_posts/一个梦.md","raw":"---\ntitle: 一个梦\ndate: 2018-04-19 18:02:22\ntags:\n---\n今天做了一个很难过的梦，我忍不住记下来：\n梦里我住着一个小区\n小区周围的小孩时不时地会失踪\n但庆幸的是他们总会自己走回来\n然而他们回来的时候眼睛变得呆滞，笑容僵硬，行动也很奇怪\n他们爸妈很开心找到自己的小孩但是又非常心疼一点办法都没有\n从此就很少见那些小孩出门\n渐渐地小区的人越来越少\n我也是小区里的一个小孩，刷朋友圈看到有人卖广告\n点进去发现这个广告是说线下排队玩游戏拿小猪佩奇的\n然后我就想这绝对是个骗人的玩意，但是还是去了（？？？为什么呢）\n线下排队人非常多，绕着一圈又一圈\n然后这个广告商非常神奇，他们有操控下雨的能力，那些雨都是齐刷刷地往不同方向下的\n他们玩游戏的通关方式是要躲避操控的雨不被淋湿\n没躲过雨的人当然就会全身湿透，然后他们会提供一个换衣服的地方\n很有意思的是，我进去换衣服，门一关，就出不来了\n我怎么喊都没人应，意识到自己被拐了，非常害怕\n过了两天，房间里面有个对讲机它有声音了\n监狱外面的人说要用对讲机教我武功\n学会了就放我出来\n我还很开心，诶呦还有武功学\n过了三个月，我学会了\n这个武功也非常厉害，他们的机器配合上我的武功可以复制出五个我\n那些被复制的我看起来就非常呆滞\n他们把其中一个送回到我的家里\n剩下三个留了下来做苦力\n然后我就被放了，给了几千\n我意识到这就是梦里一开始那个拐卖小孩的集团\n小区的家长看到的都是被复制的小孩\n所以我努力凑钱\n过了三年终于回到家乡\n发现家已经搬走\n我再也找不到爸妈\n估计家里那个被复制的我已代替着我活了下来","slug":"一个梦","published":1,"updated":"2018-05-01T14:59:16.470Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjho6oan90004v4vmxmnw8241","content":"<p>今天做了一个很难过的梦，我忍不住记下来：<br>梦里我住着一个小区<br>小区周围的小孩时不时地会失踪<br>但庆幸的是他们总会自己走回来<br>然而他们回来的时候眼睛变得呆滞，笑容僵硬，行动也很奇怪<br>他们爸妈很开心找到自己的小孩但是又非常心疼一点办法都没有<br>从此就很少见那些小孩出门<br>渐渐地小区的人越来越少<br>我也是小区里的一个小孩，刷朋友圈看到有人卖广告<br>点进去发现这个广告是说线下排队玩游戏拿小猪佩奇的<br>然后我就想这绝对是个骗人的玩意，但是还是去了（？？？为什么呢）<br>线下排队人非常多，绕着一圈又一圈<br>然后这个广告商非常神奇，他们有操控下雨的能力，那些雨都是齐刷刷地往不同方向下的<br>他们玩游戏的通关方式是要躲避操控的雨不被淋湿<br>没躲过雨的人当然就会全身湿透，然后他们会提供一个换衣服的地方<br>很有意思的是，我进去换衣服，门一关，就出不来了<br>我怎么喊都没人应，意识到自己被拐了，非常害怕<br>过了两天，房间里面有个对讲机它有声音了<br>监狱外面的人说要用对讲机教我武功<br>学会了就放我出来<br>我还很开心，诶呦还有武功学<br>过了三个月，我学会了<br>这个武功也非常厉害，他们的机器配合上我的武功可以复制出五个我<br>那些被复制的我看起来就非常呆滞<br>他们把其中一个送回到我的家里<br>剩下三个留了下来做苦力<br>然后我就被放了，给了几千<br>我意识到这就是梦里一开始那个拐卖小孩的集团<br>小区的家长看到的都是被复制的小孩<br>所以我努力凑钱<br>过了三年终于回到家乡<br>发现家已经搬走<br>我再也找不到爸妈<br>估计家里那个被复制的我已代替着我活了下来</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天做了一个很难过的梦，我忍不住记下来：<br>梦里我住着一个小区<br>小区周围的小孩时不时地会失踪<br>但庆幸的是他们总会自己走回来<br>然而他们回来的时候眼睛变得呆滞，笑容僵硬，行动也很奇怪<br>他们爸妈很开心找到自己的小孩但是又非常心疼一点办法都没有<br>从此就很少见那些小孩出门<br>渐渐地小区的人越来越少<br>我也是小区里的一个小孩，刷朋友圈看到有人卖广告<br>点进去发现这个广告是说线下排队玩游戏拿小猪佩奇的<br>然后我就想这绝对是个骗人的玩意，但是还是去了（？？？为什么呢）<br>线下排队人非常多，绕着一圈又一圈<br>然后这个广告商非常神奇，他们有操控下雨的能力，那些雨都是齐刷刷地往不同方向下的<br>他们玩游戏的通关方式是要躲避操控的雨不被淋湿<br>没躲过雨的人当然就会全身湿透，然后他们会提供一个换衣服的地方<br>很有意思的是，我进去换衣服，门一关，就出不来了<br>我怎么喊都没人应，意识到自己被拐了，非常害怕<br>过了两天，房间里面有个对讲机它有声音了<br>监狱外面的人说要用对讲机教我武功<br>学会了就放我出来<br>我还很开心，诶呦还有武功学<br>过了三个月，我学会了<br>这个武功也非常厉害，他们的机器配合上我的武功可以复制出五个我<br>那些被复制的我看起来就非常呆滞<br>他们把其中一个送回到我的家里<br>剩下三个留了下来做苦力<br>然后我就被放了，给了几千<br>我意识到这就是梦里一开始那个拐卖小孩的集团<br>小区的家长看到的都是被复制的小孩<br>所以我努力凑钱<br>过了三年终于回到家乡<br>发现家已经搬走<br>我再也找不到爸妈<br>估计家里那个被复制的我已代替着我活了下来</p>\n"},{"title":"从输入url到页面加载完成的过程","date":"2018-04-05T04:03:12.000Z","_content":"大部分参考来自[从输入 URL 到页面加载完成的过程中都发生了什么事情？](https://link.zhihu.com/?target=https%3A//www.jianshu.com/p/71cf7f69eca8)\n\n## 总过程：\n\n1. 输入网址URL\n2. 缓存机制\n3. DNS解析\n4. TCP连接\n5. 发送http请求\n6. 接受响应，判断状态码选择处理方式\n7. 判断缓存\n8. 解码\n9. 渲染\n10. 连接结束\n\n## 1.输入网址Url\n\n端口默认为80，一共有6要素:协议，域名，路径，查询参数，锚点，端口\n<img src=\"http://p824lkmi5.bkt.clouddn.com/url.PNG\">\nURI：**统一资源标识符**（英语：Uniform Resource Identifier）\n\nURL:**统一资源定位符**(英语：Uniform Resource Locator）\n\nURN:**统一资源名称**（英语：Uniform Resource Name）\n<img src=\"http://p824lkmi5.bkt.clouddn.com/v2-721bec67cf5bf151c0bc21f44a9bca20_b.jpg\">\nURI可被视为定位符（URL），名称（URN）或两者兼备。\n\nURL代表一个人的住址，如网址[http://www.wikipedia.org/](https://link.zhihu.com/?target=http%3A//www.wikipedia.org/)\n\nURN如同一个人的名称，如书号[ISBN](https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/urn%3AISBN) 0-395-36341-1 \n\n> 换言之，URN定义某事物的身份，而URL提供查找该事物的方法\n\n## 2.经过缓存机制\n\n将URL与缓存进行比对如果请求的页面在缓存中且未过期，则直接进行**第7步**\n\n**2.1 彻底缓存的机制（http首部字段）：cache-control，Expires**\n\n--Expires是一个绝对时间，即服务器时间。浏览器检查当前时间，如果还没到失效时间就直接使用缓存文件。但是该方法存在一个问题：服务器时间与客户端时间可能不一致。因此该字段已经很少使用，现在基本用cache-control进行判断。\n\n--cache-control中的max-age保存一个相对时间。例如Cache-Control: max-age = 484200，表示浏览器收到文件后，缓存在484200s内均有效。 如果同时存在cache-control和Expires，浏览器总是优先使用cache-control。\n\n**2.2 当缓存过期时，浏览器会向服务器发起请求询问资源是否真正过期，这就是缓存协商。对应http首部字段：last-modified，Etag**\n\n--last-modified是第一次请求资源时，服务器返回的字段，表示最后一次更新的时间。下一次浏览器请求资源时就发送if-modified-since字段。服务器用本地Last-modified时间与if-modified-since时间比较，如果不一致则认为缓存已过期并返回新资源给浏览器；如果时间一致则发送304状态码，让浏览器继续使用缓存。当然，用该方法也存在问题，比如修改时间有变化但实际内容没有变化，而服务器却再次将资源发送给浏览器。所以，使用Etag进行判断更好。\n\n--Etag：资源的实体标识（哈希字符串），当资源内容更新时，Etag会改变。服务器会判断Etag是否发生变化，如果变化则返回新资源，否则返回304。\n\n> 缓存协商的过程需要发起一起HTTP请求，如果返回304则继续使用缓存。对于移动端一次请求还是有代价的，所以我们需要避免304。\n> 对于很少进行更改的静态文件，可以在文件名中加入版本号，如get.v1.js，并且把Cache-Control的max-age设置成一年半载，这样就不会发送请求。\n> 需要注意的是，当这些文件更新的时候，我们需要更新其版本号，这样浏览器才会到服务器下载新资源。\n\n<img src=\"https://pic1.zhimg.com/v2-b25c1588fb03898fccd8d4a1cc4931c1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"692\" data-rawheight=\"1031\" class=\"origin_image zh-lightbox-thumb\" width=\"692\" data-original=\"https://pic1.zhimg.com/v2-b25c1588fb03898fccd8d4a1cc4931c1_r.jpg\">![](https://pic1.zhimg.com/80/v2-b25c1588fb03898fccd8d4a1cc4931c1_hd.jpg)\n\n## 3.DNS解析得到ip：\n\n由于ip比较难记，所以一般输入域名，通过dns解析得到ip。\n\n網域名稱系統（英文：Domain Name System，縮寫：DNS）是互联网的一项服务。它作为将域名和IP地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。\n\n**DNS查找缓存顺序：浏览器缓存——>hosts文件——>路由器缓存——>网络服务商缓存——>根域名服务器缓存**\n\n## 4.建立连接--三次握手\n\n得到 ip 地址后，知道了服务器的 IP 地址，下面便开始与服务器建立连接了。\n\nTCP是互联网中的传输层协议，提供可靠的链接服务，采用三次握手确认一个连接：\n\n1. 浏览器向服务器发送建立连接的请求。\n\n2. 服务器接收到浏览器发送的请求后，想浏览器发送统一连接的信号。\n\n3. 浏览器接受到服务器发出的同意连接的信号后，再次向服务器发出确认连接的信号。\n\n当三次握手返程，TCP客户端和服务端成功的建立连接，就可以开始传输数据了。\n\n**第三次是防止了服务器端的一直等待而浪费资源**\n\n三次握手的过程：\n主机向服务器发送一个建立连接的请求（您好，我想认识您）；\n服务器接到请求后发送同意连接的信号（好的，很高兴认识您）；\n主机接到同意连接的信号后，再次向服务器发送了确认信号（我也很高兴认识您），自此，主机与服务器两者建立了连接。\n\nTCP/IP协议层次 模型共分为四层，分别是：应用层、传输层、网络层、数据链路层\n\n应用层 http、ftp、DNS    比如浏览器登录界面\n\n传输层tcp/udp  传的快慢\n\n网络层ip        路由器，指导传送路径\n\n数据链路层    交换机，处理帧数据\n\ntcp协议：发送信息以后，可以确认信息是否到达，也就是有应答的方式。先确认有没有人，传到之后也会告诉你成功了。可以比喻成很慢的打电话，可以有效确认。但是速度上是比udp慢的。\n\nUDP协议：发送以后就不管了，不去确认信息是否到达。说什么就传什么的机制。可以比喻成飞快的写信，发了不知道有没有收到，速度上比tcp快。\n\n[TCP 和 UDP 的区别是什么](https://link.zhihu.com/?target=https%3A//www.nowcoder.com/questionTerminal/63c8b45c91a544bd8febc1f1ff02e3b5%3FtoCommentId%3D73766)\nTCP 可靠、面向连接、相对 UDP 较慢；\n\nUDP 不可靠，不面向连接、相对 TCP 较快。搞定。\n<img src=\"http://p824lkmi5.bkt.clouddn.com/v2-d23102b52df5cd3fe37ba61bba89f5b2_r.jpg\">\n## 5.网页请求\n\n浏览器会开始构造一个**应用层**的 http 请求，把**传输层**tcp 包被封到**网络层**的 ip 包里面，ip 包再被封装到**数据链路层**的数据帧结构中，再通过**物理层**的比特流送出去。\n\nhttp规定如何请求响应的书写。应用层\n\ntcp规定如何传输。传输层\n\nip规定如何连接以及对应位置。网络层\n\nport对应ip不同服务\n\n一个典型的 http 请求的 header 一般需要包括请求的方法，例如 GET 或者 POST 等。\n\n浏览器向 web 服务器发送一个 HTTP 请求，请求中包含请求文件的位置、请求文件的方式等等\n\n## 6.浏览器接受 HTTP 响应，检查 HTTP header 里的状态码，并做出不同的处理方式\n\n> 比如404显示错误页面，304使用缓存，200下一步解码和渲染， 204页面不会发生更新。\n> 常见状态码：200 ok, 204 no content, 206 partial content\n> 301 moved permanently(资源已分配新的uri)，302 found(本次使用新uri访问)，303 see other(以get定向到另一个uri)，304 not modified, 307 temporary redirect(不会从post改为get)\n> 400 bad request，402 unauthorized，403 forbidden, 404 not found\n> 500 internal server error，503 service unavailable\n\n## 7.如果是可以缓存的，这个响应则会被存储起来\n\n根据首部字段判断是否进行缓存。例如，Cache-Control, no-cache(每次使用缓存前和服务器确认)，no-store 绝对禁止缓存\n\n## 8.解码\n\n9.1 浏览器拿到index.html文件后，就开始解析其中的html代码，遇到js/css/image等静态资源时，就向服务器端去请求下载\n\n9.2 解析成对应的树形数据结构DOM树、CSS规则树，Javascript脚本通过DOM API和CSSOM API来操作DOM树、CSS规则树。\n\n## 9.渲染\n\n10.1 计算CSS样式（JS可动态修改dom或css,进一步改变渲染树和分布）\n\n10.2 构建渲染树（Repaint：屏幕的一部分要重画，比如某个CSS的背景色变了，元素的几何尺寸没有变。Reflow：几何尺寸变了，我们需要重新验证并计算Render Tree。）\n\n10.3 确认布局（定位坐标和大小，是否换行，各种position, overflow, z-index属性 ……）\n\n10.4 绘制（调用操作系统Native GUI的API绘制，将每个节点转化为实际像素绘制到视口上）\n\n## 10.断开连接--四次挥手\n\n四次挥手的过程：\n主机向服务器发送一个断开连接的请求（不早了，我该走了）；\n服务器接到请求后发送确认收到请求的信号（知道了）；\n服务器向主机发送断开通知（我也该走了）；\n主机接到断开通知后断开连接并反馈一个确认信号（嗯，好的），服务器收到确认信号后断开连接；","source":"_posts/从输入url到页面实现的过程.md","raw":"---\ntitle: 从输入url到页面加载完成的过程\ndate: 2018-04-5 12:03:12\ntags:\n---\n大部分参考来自[从输入 URL 到页面加载完成的过程中都发生了什么事情？](https://link.zhihu.com/?target=https%3A//www.jianshu.com/p/71cf7f69eca8)\n\n## 总过程：\n\n1. 输入网址URL\n2. 缓存机制\n3. DNS解析\n4. TCP连接\n5. 发送http请求\n6. 接受响应，判断状态码选择处理方式\n7. 判断缓存\n8. 解码\n9. 渲染\n10. 连接结束\n\n## 1.输入网址Url\n\n端口默认为80，一共有6要素:协议，域名，路径，查询参数，锚点，端口\n<img src=\"http://p824lkmi5.bkt.clouddn.com/url.PNG\">\nURI：**统一资源标识符**（英语：Uniform Resource Identifier）\n\nURL:**统一资源定位符**(英语：Uniform Resource Locator）\n\nURN:**统一资源名称**（英语：Uniform Resource Name）\n<img src=\"http://p824lkmi5.bkt.clouddn.com/v2-721bec67cf5bf151c0bc21f44a9bca20_b.jpg\">\nURI可被视为定位符（URL），名称（URN）或两者兼备。\n\nURL代表一个人的住址，如网址[http://www.wikipedia.org/](https://link.zhihu.com/?target=http%3A//www.wikipedia.org/)\n\nURN如同一个人的名称，如书号[ISBN](https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/urn%3AISBN) 0-395-36341-1 \n\n> 换言之，URN定义某事物的身份，而URL提供查找该事物的方法\n\n## 2.经过缓存机制\n\n将URL与缓存进行比对如果请求的页面在缓存中且未过期，则直接进行**第7步**\n\n**2.1 彻底缓存的机制（http首部字段）：cache-control，Expires**\n\n--Expires是一个绝对时间，即服务器时间。浏览器检查当前时间，如果还没到失效时间就直接使用缓存文件。但是该方法存在一个问题：服务器时间与客户端时间可能不一致。因此该字段已经很少使用，现在基本用cache-control进行判断。\n\n--cache-control中的max-age保存一个相对时间。例如Cache-Control: max-age = 484200，表示浏览器收到文件后，缓存在484200s内均有效。 如果同时存在cache-control和Expires，浏览器总是优先使用cache-control。\n\n**2.2 当缓存过期时，浏览器会向服务器发起请求询问资源是否真正过期，这就是缓存协商。对应http首部字段：last-modified，Etag**\n\n--last-modified是第一次请求资源时，服务器返回的字段，表示最后一次更新的时间。下一次浏览器请求资源时就发送if-modified-since字段。服务器用本地Last-modified时间与if-modified-since时间比较，如果不一致则认为缓存已过期并返回新资源给浏览器；如果时间一致则发送304状态码，让浏览器继续使用缓存。当然，用该方法也存在问题，比如修改时间有变化但实际内容没有变化，而服务器却再次将资源发送给浏览器。所以，使用Etag进行判断更好。\n\n--Etag：资源的实体标识（哈希字符串），当资源内容更新时，Etag会改变。服务器会判断Etag是否发生变化，如果变化则返回新资源，否则返回304。\n\n> 缓存协商的过程需要发起一起HTTP请求，如果返回304则继续使用缓存。对于移动端一次请求还是有代价的，所以我们需要避免304。\n> 对于很少进行更改的静态文件，可以在文件名中加入版本号，如get.v1.js，并且把Cache-Control的max-age设置成一年半载，这样就不会发送请求。\n> 需要注意的是，当这些文件更新的时候，我们需要更新其版本号，这样浏览器才会到服务器下载新资源。\n\n<img src=\"https://pic1.zhimg.com/v2-b25c1588fb03898fccd8d4a1cc4931c1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"692\" data-rawheight=\"1031\" class=\"origin_image zh-lightbox-thumb\" width=\"692\" data-original=\"https://pic1.zhimg.com/v2-b25c1588fb03898fccd8d4a1cc4931c1_r.jpg\">![](https://pic1.zhimg.com/80/v2-b25c1588fb03898fccd8d4a1cc4931c1_hd.jpg)\n\n## 3.DNS解析得到ip：\n\n由于ip比较难记，所以一般输入域名，通过dns解析得到ip。\n\n網域名稱系統（英文：Domain Name System，縮寫：DNS）是互联网的一项服务。它作为将域名和IP地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。\n\n**DNS查找缓存顺序：浏览器缓存——>hosts文件——>路由器缓存——>网络服务商缓存——>根域名服务器缓存**\n\n## 4.建立连接--三次握手\n\n得到 ip 地址后，知道了服务器的 IP 地址，下面便开始与服务器建立连接了。\n\nTCP是互联网中的传输层协议，提供可靠的链接服务，采用三次握手确认一个连接：\n\n1. 浏览器向服务器发送建立连接的请求。\n\n2. 服务器接收到浏览器发送的请求后，想浏览器发送统一连接的信号。\n\n3. 浏览器接受到服务器发出的同意连接的信号后，再次向服务器发出确认连接的信号。\n\n当三次握手返程，TCP客户端和服务端成功的建立连接，就可以开始传输数据了。\n\n**第三次是防止了服务器端的一直等待而浪费资源**\n\n三次握手的过程：\n主机向服务器发送一个建立连接的请求（您好，我想认识您）；\n服务器接到请求后发送同意连接的信号（好的，很高兴认识您）；\n主机接到同意连接的信号后，再次向服务器发送了确认信号（我也很高兴认识您），自此，主机与服务器两者建立了连接。\n\nTCP/IP协议层次 模型共分为四层，分别是：应用层、传输层、网络层、数据链路层\n\n应用层 http、ftp、DNS    比如浏览器登录界面\n\n传输层tcp/udp  传的快慢\n\n网络层ip        路由器，指导传送路径\n\n数据链路层    交换机，处理帧数据\n\ntcp协议：发送信息以后，可以确认信息是否到达，也就是有应答的方式。先确认有没有人，传到之后也会告诉你成功了。可以比喻成很慢的打电话，可以有效确认。但是速度上是比udp慢的。\n\nUDP协议：发送以后就不管了，不去确认信息是否到达。说什么就传什么的机制。可以比喻成飞快的写信，发了不知道有没有收到，速度上比tcp快。\n\n[TCP 和 UDP 的区别是什么](https://link.zhihu.com/?target=https%3A//www.nowcoder.com/questionTerminal/63c8b45c91a544bd8febc1f1ff02e3b5%3FtoCommentId%3D73766)\nTCP 可靠、面向连接、相对 UDP 较慢；\n\nUDP 不可靠，不面向连接、相对 TCP 较快。搞定。\n<img src=\"http://p824lkmi5.bkt.clouddn.com/v2-d23102b52df5cd3fe37ba61bba89f5b2_r.jpg\">\n## 5.网页请求\n\n浏览器会开始构造一个**应用层**的 http 请求，把**传输层**tcp 包被封到**网络层**的 ip 包里面，ip 包再被封装到**数据链路层**的数据帧结构中，再通过**物理层**的比特流送出去。\n\nhttp规定如何请求响应的书写。应用层\n\ntcp规定如何传输。传输层\n\nip规定如何连接以及对应位置。网络层\n\nport对应ip不同服务\n\n一个典型的 http 请求的 header 一般需要包括请求的方法，例如 GET 或者 POST 等。\n\n浏览器向 web 服务器发送一个 HTTP 请求，请求中包含请求文件的位置、请求文件的方式等等\n\n## 6.浏览器接受 HTTP 响应，检查 HTTP header 里的状态码，并做出不同的处理方式\n\n> 比如404显示错误页面，304使用缓存，200下一步解码和渲染， 204页面不会发生更新。\n> 常见状态码：200 ok, 204 no content, 206 partial content\n> 301 moved permanently(资源已分配新的uri)，302 found(本次使用新uri访问)，303 see other(以get定向到另一个uri)，304 not modified, 307 temporary redirect(不会从post改为get)\n> 400 bad request，402 unauthorized，403 forbidden, 404 not found\n> 500 internal server error，503 service unavailable\n\n## 7.如果是可以缓存的，这个响应则会被存储起来\n\n根据首部字段判断是否进行缓存。例如，Cache-Control, no-cache(每次使用缓存前和服务器确认)，no-store 绝对禁止缓存\n\n## 8.解码\n\n9.1 浏览器拿到index.html文件后，就开始解析其中的html代码，遇到js/css/image等静态资源时，就向服务器端去请求下载\n\n9.2 解析成对应的树形数据结构DOM树、CSS规则树，Javascript脚本通过DOM API和CSSOM API来操作DOM树、CSS规则树。\n\n## 9.渲染\n\n10.1 计算CSS样式（JS可动态修改dom或css,进一步改变渲染树和分布）\n\n10.2 构建渲染树（Repaint：屏幕的一部分要重画，比如某个CSS的背景色变了，元素的几何尺寸没有变。Reflow：几何尺寸变了，我们需要重新验证并计算Render Tree。）\n\n10.3 确认布局（定位坐标和大小，是否换行，各种position, overflow, z-index属性 ……）\n\n10.4 绘制（调用操作系统Native GUI的API绘制，将每个节点转化为实际像素绘制到视口上）\n\n## 10.断开连接--四次挥手\n\n四次挥手的过程：\n主机向服务器发送一个断开连接的请求（不早了，我该走了）；\n服务器接到请求后发送确认收到请求的信号（知道了）；\n服务器向主机发送断开通知（我也该走了）；\n主机接到断开通知后断开连接并反馈一个确认信号（嗯，好的），服务器收到确认信号后断开连接；","slug":"从输入url到页面实现的过程","published":1,"updated":"2018-05-01T16:13:49.669Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjho6oana0005v4vmgk7agdsk","content":"<p>大部分参考来自<a href=\"https://link.zhihu.com/?target=https%3A//www.jianshu.com/p/71cf7f69eca8\" target=\"_blank\" rel=\"noopener\">从输入 URL 到页面加载完成的过程中都发生了什么事情？</a></p>\n<h2 id=\"总过程：\"><a href=\"#总过程：\" class=\"headerlink\" title=\"总过程：\"></a>总过程：</h2><ol>\n<li>输入网址URL</li>\n<li>缓存机制</li>\n<li>DNS解析</li>\n<li>TCP连接</li>\n<li>发送http请求</li>\n<li>接受响应，判断状态码选择处理方式</li>\n<li>判断缓存</li>\n<li>解码</li>\n<li>渲染</li>\n<li>连接结束</li>\n</ol>\n<h2 id=\"1-输入网址Url\"><a href=\"#1-输入网址Url\" class=\"headerlink\" title=\"1.输入网址Url\"></a>1.输入网址Url</h2><p>端口默认为80，一共有6要素:协议，域名，路径，查询参数，锚点，端口<br><img src=\"http://p824lkmi5.bkt.clouddn.com/url.PNG\"><br>URI：<strong>统一资源标识符</strong>（英语：Uniform Resource Identifier）</p>\n<p>URL:<strong>统一资源定位符</strong>(英语：Uniform Resource Locator）</p>\n<p>URN:<strong>统一资源名称</strong>（英语：Uniform Resource Name）<br><img src=\"http://p824lkmi5.bkt.clouddn.com/v2-721bec67cf5bf151c0bc21f44a9bca20_b.jpg\"><br>URI可被视为定位符（URL），名称（URN）或两者兼备。</p>\n<p>URL代表一个人的住址，如网址<a href=\"https://link.zhihu.com/?target=http%3A//www.wikipedia.org/\" target=\"_blank\" rel=\"noopener\">http://www.wikipedia.org/</a></p>\n<p>URN如同一个人的名称，如书号<a href=\"https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/urn%3AISBN\" target=\"_blank\" rel=\"noopener\">ISBN</a> 0-395-36341-1 </p>\n<blockquote>\n<p>换言之，URN定义某事物的身份，而URL提供查找该事物的方法</p>\n</blockquote>\n<h2 id=\"2-经过缓存机制\"><a href=\"#2-经过缓存机制\" class=\"headerlink\" title=\"2.经过缓存机制\"></a>2.经过缓存机制</h2><p>将URL与缓存进行比对如果请求的页面在缓存中且未过期，则直接进行<strong>第7步</strong></p>\n<p><strong>2.1 彻底缓存的机制（http首部字段）：cache-control，Expires</strong></p>\n<p>–Expires是一个绝对时间，即服务器时间。浏览器检查当前时间，如果还没到失效时间就直接使用缓存文件。但是该方法存在一个问题：服务器时间与客户端时间可能不一致。因此该字段已经很少使用，现在基本用cache-control进行判断。</p>\n<p>–cache-control中的max-age保存一个相对时间。例如Cache-Control: max-age = 484200，表示浏览器收到文件后，缓存在484200s内均有效。 如果同时存在cache-control和Expires，浏览器总是优先使用cache-control。</p>\n<p><strong>2.2 当缓存过期时，浏览器会向服务器发起请求询问资源是否真正过期，这就是缓存协商。对应http首部字段：last-modified，Etag</strong></p>\n<p>–last-modified是第一次请求资源时，服务器返回的字段，表示最后一次更新的时间。下一次浏览器请求资源时就发送if-modified-since字段。服务器用本地Last-modified时间与if-modified-since时间比较，如果不一致则认为缓存已过期并返回新资源给浏览器；如果时间一致则发送304状态码，让浏览器继续使用缓存。当然，用该方法也存在问题，比如修改时间有变化但实际内容没有变化，而服务器却再次将资源发送给浏览器。所以，使用Etag进行判断更好。</p>\n<p>–Etag：资源的实体标识（哈希字符串），当资源内容更新时，Etag会改变。服务器会判断Etag是否发生变化，如果变化则返回新资源，否则返回304。</p>\n<blockquote>\n<p>缓存协商的过程需要发起一起HTTP请求，如果返回304则继续使用缓存。对于移动端一次请求还是有代价的，所以我们需要避免304。<br>对于很少进行更改的静态文件，可以在文件名中加入版本号，如get.v1.js，并且把Cache-Control的max-age设置成一年半载，这样就不会发送请求。<br>需要注意的是，当这些文件更新的时候，我们需要更新其版本号，这样浏览器才会到服务器下载新资源。</p>\n</blockquote>\n<p><img src=\"https://pic1.zhimg.com/v2-b25c1588fb03898fccd8d4a1cc4931c1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"692\" data-rawheight=\"1031\" class=\"origin_image zh-lightbox-thumb\" width=\"692\" data-original=\"https://pic1.zhimg.com/v2-b25c1588fb03898fccd8d4a1cc4931c1_r.jpg\"><img src=\"https://pic1.zhimg.com/80/v2-b25c1588fb03898fccd8d4a1cc4931c1_hd.jpg\" alt=\"\"></p>\n<h2 id=\"3-DNS解析得到ip：\"><a href=\"#3-DNS解析得到ip：\" class=\"headerlink\" title=\"3.DNS解析得到ip：\"></a>3.DNS解析得到ip：</h2><p>由于ip比较难记，所以一般输入域名，通过dns解析得到ip。</p>\n<p>網域名稱系統（英文：Domain Name System，縮寫：DNS）是互联网的一项服务。它作为将域名和IP地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。</p>\n<p><strong>DNS查找缓存顺序：浏览器缓存——&gt;hosts文件——&gt;路由器缓存——&gt;网络服务商缓存——&gt;根域名服务器缓存</strong></p>\n<h2 id=\"4-建立连接–三次握手\"><a href=\"#4-建立连接–三次握手\" class=\"headerlink\" title=\"4.建立连接–三次握手\"></a>4.建立连接–三次握手</h2><p>得到 ip 地址后，知道了服务器的 IP 地址，下面便开始与服务器建立连接了。</p>\n<p>TCP是互联网中的传输层协议，提供可靠的链接服务，采用三次握手确认一个连接：</p>\n<ol>\n<li><p>浏览器向服务器发送建立连接的请求。</p>\n</li>\n<li><p>服务器接收到浏览器发送的请求后，想浏览器发送统一连接的信号。</p>\n</li>\n<li><p>浏览器接受到服务器发出的同意连接的信号后，再次向服务器发出确认连接的信号。</p>\n</li>\n</ol>\n<p>当三次握手返程，TCP客户端和服务端成功的建立连接，就可以开始传输数据了。</p>\n<p><strong>第三次是防止了服务器端的一直等待而浪费资源</strong></p>\n<p>三次握手的过程：<br>主机向服务器发送一个建立连接的请求（您好，我想认识您）；<br>服务器接到请求后发送同意连接的信号（好的，很高兴认识您）；<br>主机接到同意连接的信号后，再次向服务器发送了确认信号（我也很高兴认识您），自此，主机与服务器两者建立了连接。</p>\n<p>TCP/IP协议层次 模型共分为四层，分别是：应用层、传输层、网络层、数据链路层</p>\n<p>应用层 http、ftp、DNS    比如浏览器登录界面</p>\n<p>传输层tcp/udp  传的快慢</p>\n<p>网络层ip        路由器，指导传送路径</p>\n<p>数据链路层    交换机，处理帧数据</p>\n<p>tcp协议：发送信息以后，可以确认信息是否到达，也就是有应答的方式。先确认有没有人，传到之后也会告诉你成功了。可以比喻成很慢的打电话，可以有效确认。但是速度上是比udp慢的。</p>\n<p>UDP协议：发送以后就不管了，不去确认信息是否到达。说什么就传什么的机制。可以比喻成飞快的写信，发了不知道有没有收到，速度上比tcp快。</p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//www.nowcoder.com/questionTerminal/63c8b45c91a544bd8febc1f1ff02e3b5%3FtoCommentId%3D73766\" target=\"_blank\" rel=\"noopener\">TCP 和 UDP 的区别是什么</a><br>TCP 可靠、面向连接、相对 UDP 较慢；</p>\n<p>UDP 不可靠，不面向连接、相对 TCP 较快。搞定。<br><img src=\"http://p824lkmi5.bkt.clouddn.com/v2-d23102b52df5cd3fe37ba61bba89f5b2_r.jpg\"></p>\n<h2 id=\"5-网页请求\"><a href=\"#5-网页请求\" class=\"headerlink\" title=\"5.网页请求\"></a>5.网页请求</h2><p>浏览器会开始构造一个<strong>应用层</strong>的 http 请求，把<strong>传输层</strong>tcp 包被封到<strong>网络层</strong>的 ip 包里面，ip 包再被封装到<strong>数据链路层</strong>的数据帧结构中，再通过<strong>物理层</strong>的比特流送出去。</p>\n<p>http规定如何请求响应的书写。应用层</p>\n<p>tcp规定如何传输。传输层</p>\n<p>ip规定如何连接以及对应位置。网络层</p>\n<p>port对应ip不同服务</p>\n<p>一个典型的 http 请求的 header 一般需要包括请求的方法，例如 GET 或者 POST 等。</p>\n<p>浏览器向 web 服务器发送一个 HTTP 请求，请求中包含请求文件的位置、请求文件的方式等等</p>\n<h2 id=\"6-浏览器接受-HTTP-响应，检查-HTTP-header-里的状态码，并做出不同的处理方式\"><a href=\"#6-浏览器接受-HTTP-响应，检查-HTTP-header-里的状态码，并做出不同的处理方式\" class=\"headerlink\" title=\"6.浏览器接受 HTTP 响应，检查 HTTP header 里的状态码，并做出不同的处理方式\"></a>6.浏览器接受 HTTP 响应，检查 HTTP header 里的状态码，并做出不同的处理方式</h2><blockquote>\n<p>比如404显示错误页面，304使用缓存，200下一步解码和渲染， 204页面不会发生更新。<br>常见状态码：200 ok, 204 no content, 206 partial content<br>301 moved permanently(资源已分配新的uri)，302 found(本次使用新uri访问)，303 see other(以get定向到另一个uri)，304 not modified, 307 temporary redirect(不会从post改为get)<br>400 bad request，402 unauthorized，403 forbidden, 404 not found<br>500 internal server error，503 service unavailable</p>\n</blockquote>\n<h2 id=\"7-如果是可以缓存的，这个响应则会被存储起来\"><a href=\"#7-如果是可以缓存的，这个响应则会被存储起来\" class=\"headerlink\" title=\"7.如果是可以缓存的，这个响应则会被存储起来\"></a>7.如果是可以缓存的，这个响应则会被存储起来</h2><p>根据首部字段判断是否进行缓存。例如，Cache-Control, no-cache(每次使用缓存前和服务器确认)，no-store 绝对禁止缓存</p>\n<h2 id=\"8-解码\"><a href=\"#8-解码\" class=\"headerlink\" title=\"8.解码\"></a>8.解码</h2><p>9.1 浏览器拿到index.html文件后，就开始解析其中的html代码，遇到js/css/image等静态资源时，就向服务器端去请求下载</p>\n<p>9.2 解析成对应的树形数据结构DOM树、CSS规则树，Javascript脚本通过DOM API和CSSOM API来操作DOM树、CSS规则树。</p>\n<h2 id=\"9-渲染\"><a href=\"#9-渲染\" class=\"headerlink\" title=\"9.渲染\"></a>9.渲染</h2><p>10.1 计算CSS样式（JS可动态修改dom或css,进一步改变渲染树和分布）</p>\n<p>10.2 构建渲染树（Repaint：屏幕的一部分要重画，比如某个CSS的背景色变了，元素的几何尺寸没有变。Reflow：几何尺寸变了，我们需要重新验证并计算Render Tree。）</p>\n<p>10.3 确认布局（定位坐标和大小，是否换行，各种position, overflow, z-index属性 ……）</p>\n<p>10.4 绘制（调用操作系统Native GUI的API绘制，将每个节点转化为实际像素绘制到视口上）</p>\n<h2 id=\"10-断开连接–四次挥手\"><a href=\"#10-断开连接–四次挥手\" class=\"headerlink\" title=\"10.断开连接–四次挥手\"></a>10.断开连接–四次挥手</h2><p>四次挥手的过程：<br>主机向服务器发送一个断开连接的请求（不早了，我该走了）；<br>服务器接到请求后发送确认收到请求的信号（知道了）；<br>服务器向主机发送断开通知（我也该走了）；<br>主机接到断开通知后断开连接并反馈一个确认信号（嗯，好的），服务器收到确认信号后断开连接；</p>\n","site":{"data":{}},"excerpt":"","more":"<p>大部分参考来自<a href=\"https://link.zhihu.com/?target=https%3A//www.jianshu.com/p/71cf7f69eca8\" target=\"_blank\" rel=\"noopener\">从输入 URL 到页面加载完成的过程中都发生了什么事情？</a></p>\n<h2 id=\"总过程：\"><a href=\"#总过程：\" class=\"headerlink\" title=\"总过程：\"></a>总过程：</h2><ol>\n<li>输入网址URL</li>\n<li>缓存机制</li>\n<li>DNS解析</li>\n<li>TCP连接</li>\n<li>发送http请求</li>\n<li>接受响应，判断状态码选择处理方式</li>\n<li>判断缓存</li>\n<li>解码</li>\n<li>渲染</li>\n<li>连接结束</li>\n</ol>\n<h2 id=\"1-输入网址Url\"><a href=\"#1-输入网址Url\" class=\"headerlink\" title=\"1.输入网址Url\"></a>1.输入网址Url</h2><p>端口默认为80，一共有6要素:协议，域名，路径，查询参数，锚点，端口<br><img src=\"http://p824lkmi5.bkt.clouddn.com/url.PNG\"><br>URI：<strong>统一资源标识符</strong>（英语：Uniform Resource Identifier）</p>\n<p>URL:<strong>统一资源定位符</strong>(英语：Uniform Resource Locator）</p>\n<p>URN:<strong>统一资源名称</strong>（英语：Uniform Resource Name）<br><img src=\"http://p824lkmi5.bkt.clouddn.com/v2-721bec67cf5bf151c0bc21f44a9bca20_b.jpg\"><br>URI可被视为定位符（URL），名称（URN）或两者兼备。</p>\n<p>URL代表一个人的住址，如网址<a href=\"https://link.zhihu.com/?target=http%3A//www.wikipedia.org/\" target=\"_blank\" rel=\"noopener\">http://www.wikipedia.org/</a></p>\n<p>URN如同一个人的名称，如书号<a href=\"https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/urn%3AISBN\" target=\"_blank\" rel=\"noopener\">ISBN</a> 0-395-36341-1 </p>\n<blockquote>\n<p>换言之，URN定义某事物的身份，而URL提供查找该事物的方法</p>\n</blockquote>\n<h2 id=\"2-经过缓存机制\"><a href=\"#2-经过缓存机制\" class=\"headerlink\" title=\"2.经过缓存机制\"></a>2.经过缓存机制</h2><p>将URL与缓存进行比对如果请求的页面在缓存中且未过期，则直接进行<strong>第7步</strong></p>\n<p><strong>2.1 彻底缓存的机制（http首部字段）：cache-control，Expires</strong></p>\n<p>–Expires是一个绝对时间，即服务器时间。浏览器检查当前时间，如果还没到失效时间就直接使用缓存文件。但是该方法存在一个问题：服务器时间与客户端时间可能不一致。因此该字段已经很少使用，现在基本用cache-control进行判断。</p>\n<p>–cache-control中的max-age保存一个相对时间。例如Cache-Control: max-age = 484200，表示浏览器收到文件后，缓存在484200s内均有效。 如果同时存在cache-control和Expires，浏览器总是优先使用cache-control。</p>\n<p><strong>2.2 当缓存过期时，浏览器会向服务器发起请求询问资源是否真正过期，这就是缓存协商。对应http首部字段：last-modified，Etag</strong></p>\n<p>–last-modified是第一次请求资源时，服务器返回的字段，表示最后一次更新的时间。下一次浏览器请求资源时就发送if-modified-since字段。服务器用本地Last-modified时间与if-modified-since时间比较，如果不一致则认为缓存已过期并返回新资源给浏览器；如果时间一致则发送304状态码，让浏览器继续使用缓存。当然，用该方法也存在问题，比如修改时间有变化但实际内容没有变化，而服务器却再次将资源发送给浏览器。所以，使用Etag进行判断更好。</p>\n<p>–Etag：资源的实体标识（哈希字符串），当资源内容更新时，Etag会改变。服务器会判断Etag是否发生变化，如果变化则返回新资源，否则返回304。</p>\n<blockquote>\n<p>缓存协商的过程需要发起一起HTTP请求，如果返回304则继续使用缓存。对于移动端一次请求还是有代价的，所以我们需要避免304。<br>对于很少进行更改的静态文件，可以在文件名中加入版本号，如get.v1.js，并且把Cache-Control的max-age设置成一年半载，这样就不会发送请求。<br>需要注意的是，当这些文件更新的时候，我们需要更新其版本号，这样浏览器才会到服务器下载新资源。</p>\n</blockquote>\n<p><img src=\"https://pic1.zhimg.com/v2-b25c1588fb03898fccd8d4a1cc4931c1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"692\" data-rawheight=\"1031\" class=\"origin_image zh-lightbox-thumb\" width=\"692\" data-original=\"https://pic1.zhimg.com/v2-b25c1588fb03898fccd8d4a1cc4931c1_r.jpg\"><img src=\"https://pic1.zhimg.com/80/v2-b25c1588fb03898fccd8d4a1cc4931c1_hd.jpg\" alt=\"\"></p>\n<h2 id=\"3-DNS解析得到ip：\"><a href=\"#3-DNS解析得到ip：\" class=\"headerlink\" title=\"3.DNS解析得到ip：\"></a>3.DNS解析得到ip：</h2><p>由于ip比较难记，所以一般输入域名，通过dns解析得到ip。</p>\n<p>網域名稱系統（英文：Domain Name System，縮寫：DNS）是互联网的一项服务。它作为将域名和IP地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。</p>\n<p><strong>DNS查找缓存顺序：浏览器缓存——&gt;hosts文件——&gt;路由器缓存——&gt;网络服务商缓存——&gt;根域名服务器缓存</strong></p>\n<h2 id=\"4-建立连接–三次握手\"><a href=\"#4-建立连接–三次握手\" class=\"headerlink\" title=\"4.建立连接–三次握手\"></a>4.建立连接–三次握手</h2><p>得到 ip 地址后，知道了服务器的 IP 地址，下面便开始与服务器建立连接了。</p>\n<p>TCP是互联网中的传输层协议，提供可靠的链接服务，采用三次握手确认一个连接：</p>\n<ol>\n<li><p>浏览器向服务器发送建立连接的请求。</p>\n</li>\n<li><p>服务器接收到浏览器发送的请求后，想浏览器发送统一连接的信号。</p>\n</li>\n<li><p>浏览器接受到服务器发出的同意连接的信号后，再次向服务器发出确认连接的信号。</p>\n</li>\n</ol>\n<p>当三次握手返程，TCP客户端和服务端成功的建立连接，就可以开始传输数据了。</p>\n<p><strong>第三次是防止了服务器端的一直等待而浪费资源</strong></p>\n<p>三次握手的过程：<br>主机向服务器发送一个建立连接的请求（您好，我想认识您）；<br>服务器接到请求后发送同意连接的信号（好的，很高兴认识您）；<br>主机接到同意连接的信号后，再次向服务器发送了确认信号（我也很高兴认识您），自此，主机与服务器两者建立了连接。</p>\n<p>TCP/IP协议层次 模型共分为四层，分别是：应用层、传输层、网络层、数据链路层</p>\n<p>应用层 http、ftp、DNS    比如浏览器登录界面</p>\n<p>传输层tcp/udp  传的快慢</p>\n<p>网络层ip        路由器，指导传送路径</p>\n<p>数据链路层    交换机，处理帧数据</p>\n<p>tcp协议：发送信息以后，可以确认信息是否到达，也就是有应答的方式。先确认有没有人，传到之后也会告诉你成功了。可以比喻成很慢的打电话，可以有效确认。但是速度上是比udp慢的。</p>\n<p>UDP协议：发送以后就不管了，不去确认信息是否到达。说什么就传什么的机制。可以比喻成飞快的写信，发了不知道有没有收到，速度上比tcp快。</p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//www.nowcoder.com/questionTerminal/63c8b45c91a544bd8febc1f1ff02e3b5%3FtoCommentId%3D73766\" target=\"_blank\" rel=\"noopener\">TCP 和 UDP 的区别是什么</a><br>TCP 可靠、面向连接、相对 UDP 较慢；</p>\n<p>UDP 不可靠，不面向连接、相对 TCP 较快。搞定。<br><img src=\"http://p824lkmi5.bkt.clouddn.com/v2-d23102b52df5cd3fe37ba61bba89f5b2_r.jpg\"></p>\n<h2 id=\"5-网页请求\"><a href=\"#5-网页请求\" class=\"headerlink\" title=\"5.网页请求\"></a>5.网页请求</h2><p>浏览器会开始构造一个<strong>应用层</strong>的 http 请求，把<strong>传输层</strong>tcp 包被封到<strong>网络层</strong>的 ip 包里面，ip 包再被封装到<strong>数据链路层</strong>的数据帧结构中，再通过<strong>物理层</strong>的比特流送出去。</p>\n<p>http规定如何请求响应的书写。应用层</p>\n<p>tcp规定如何传输。传输层</p>\n<p>ip规定如何连接以及对应位置。网络层</p>\n<p>port对应ip不同服务</p>\n<p>一个典型的 http 请求的 header 一般需要包括请求的方法，例如 GET 或者 POST 等。</p>\n<p>浏览器向 web 服务器发送一个 HTTP 请求，请求中包含请求文件的位置、请求文件的方式等等</p>\n<h2 id=\"6-浏览器接受-HTTP-响应，检查-HTTP-header-里的状态码，并做出不同的处理方式\"><a href=\"#6-浏览器接受-HTTP-响应，检查-HTTP-header-里的状态码，并做出不同的处理方式\" class=\"headerlink\" title=\"6.浏览器接受 HTTP 响应，检查 HTTP header 里的状态码，并做出不同的处理方式\"></a>6.浏览器接受 HTTP 响应，检查 HTTP header 里的状态码，并做出不同的处理方式</h2><blockquote>\n<p>比如404显示错误页面，304使用缓存，200下一步解码和渲染， 204页面不会发生更新。<br>常见状态码：200 ok, 204 no content, 206 partial content<br>301 moved permanently(资源已分配新的uri)，302 found(本次使用新uri访问)，303 see other(以get定向到另一个uri)，304 not modified, 307 temporary redirect(不会从post改为get)<br>400 bad request，402 unauthorized，403 forbidden, 404 not found<br>500 internal server error，503 service unavailable</p>\n</blockquote>\n<h2 id=\"7-如果是可以缓存的，这个响应则会被存储起来\"><a href=\"#7-如果是可以缓存的，这个响应则会被存储起来\" class=\"headerlink\" title=\"7.如果是可以缓存的，这个响应则会被存储起来\"></a>7.如果是可以缓存的，这个响应则会被存储起来</h2><p>根据首部字段判断是否进行缓存。例如，Cache-Control, no-cache(每次使用缓存前和服务器确认)，no-store 绝对禁止缓存</p>\n<h2 id=\"8-解码\"><a href=\"#8-解码\" class=\"headerlink\" title=\"8.解码\"></a>8.解码</h2><p>9.1 浏览器拿到index.html文件后，就开始解析其中的html代码，遇到js/css/image等静态资源时，就向服务器端去请求下载</p>\n<p>9.2 解析成对应的树形数据结构DOM树、CSS规则树，Javascript脚本通过DOM API和CSSOM API来操作DOM树、CSS规则树。</p>\n<h2 id=\"9-渲染\"><a href=\"#9-渲染\" class=\"headerlink\" title=\"9.渲染\"></a>9.渲染</h2><p>10.1 计算CSS样式（JS可动态修改dom或css,进一步改变渲染树和分布）</p>\n<p>10.2 构建渲染树（Repaint：屏幕的一部分要重画，比如某个CSS的背景色变了，元素的几何尺寸没有变。Reflow：几何尺寸变了，我们需要重新验证并计算Render Tree。）</p>\n<p>10.3 确认布局（定位坐标和大小，是否换行，各种position, overflow, z-index属性 ……）</p>\n<p>10.4 绘制（调用操作系统Native GUI的API绘制，将每个节点转化为实际像素绘制到视口上）</p>\n<h2 id=\"10-断开连接–四次挥手\"><a href=\"#10-断开连接–四次挥手\" class=\"headerlink\" title=\"10.断开连接–四次挥手\"></a>10.断开连接–四次挥手</h2><p>四次挥手的过程：<br>主机向服务器发送一个断开连接的请求（不早了，我该走了）；<br>服务器接到请求后发送确认收到请求的信号（知道了）；<br>服务器向主机发送断开通知（我也该走了）；<br>主机接到断开通知后断开连接并反馈一个确认信号（嗯，好的），服务器收到确认信号后断开连接；</p>\n"},{"title":"利用hexo+github pages搭建个人博客","date":"2018-04-02T23:02:22.000Z","_content":"\n## 目标： 用一个仓库做博客展示页，一个仓库存程序代码\n### 搭建博客展示页仓库\n\n1. 首先在桌面创建一个文件夹做展示页的仓库 （一个仓库就够了，不需要再创建多一个文件夹做存程序代码的仓库，因为用来做存代码的仓库可以包含在里面，接下来会说原因..）\n\n<img src=\"https://raw.githubusercontent.com/Mr-Almost/blog-generator/master/%E5%88%A9%E7%94%A8hexo%2Bgithub%20pages%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/blog1.1.png\" width=\"50%\" height=\"50%\" />\n\n\n2. 把Mr-Almost.github.io的文件夹右键用gitbash打开\n\n3. 登陆github，创建空仓库，命名与文件夹相同，即“github的用户名.github.io”\n\n\n<!--more-->\n\n\n![](https://raw.githubusercontent.com/Mr-Almost/blog-generator/master/%E5%88%A9%E7%94%A8hexo%2Bgithub%20pages%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/2.png)\n\n\n\n\n4. 在gitbash上依次输入下面的代码。（由于我已经创好了仓库所以下面的仓库名是另外打的）注意：要确保gitbash上进入的位置是Mr-Almost.github.io的文件夹\n![](https://raw.githubusercontent.com/Mr-Almost/blog-generator/master/%E5%88%A9%E7%94%A8hexo%2Bgithub%20pages%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/3.png)\n\n\n5. 然后输入 \n```\nnpm install -g hexo-cli (安装 Hexo)\nhexo init\nnpm i\nhexo init myBlog\ncd myBlog\nhexo new 开博大吉\n```\n> 我本来是想直接hexo init的..但是它弹出显示说文件不是空的不能init，好吧…那就再创一个空文件好了\n6. 这时候文件夹里多出一个myBlog的文件夹，进入打开名为_config.yml的文件\n修改最下面的deploy代码：\n![](https://raw.githubusercontent.com/Mr-Almost/blog-generator/master/%E5%88%A9%E7%94%A8hexo%2Bgithub%20pages%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/4.png)\n7. 在gitbash里输入：\n```\nnpm install hexo-deployer-git –save  （安装 git 部署插件）\nhexo deploy\n```\n8. 这时刷新github即可看到自己的博客\n\n### 搭建博客程序代码仓库\n\n打开github展示页的仓库研究了一下，发现展示页的仓库只是myBlog里的public文件夹，所以我把public的父目录myBlog改为存程序的仓库发现也是可以的~\n\n1. 在github上再次创建空仓库，名字为blog-generator,然后右键下面myBlog文件夹用gitbash打开，依次输入github上的6行代码\n2. 在gitbash依次输入下面代码即可完成。\n```\ngit add .\ngit commit -m \"xx\"\ngit push\n```\n### 总结：\n每次创建新博客可以在gitbash的myblog路径下输入： hexo new 新博客名字\n然后输入 \n```\nhexo generate\nhexo deploy\n```\n这时候展示页仓库就会更新\n那存代码的仓库如何更新? \n输入:\n```\ngit add .\ngit commit -m \"xx\"\ngit push\n```\n\nGit的指令和hexo的指令要熟悉\n谷歌了一下发现存程序代码的方法还可以用分支的方法做，有空学习一下\n","source":"_posts/利用hexo-github-pages搭建个人博客 - 副本.md","raw":"---\ntitle: 利用hexo+github pages搭建个人博客\ndate: 2018-04-3 7:02:22\ntags:\n---\n\n## 目标： 用一个仓库做博客展示页，一个仓库存程序代码\n### 搭建博客展示页仓库\n\n1. 首先在桌面创建一个文件夹做展示页的仓库 （一个仓库就够了，不需要再创建多一个文件夹做存程序代码的仓库，因为用来做存代码的仓库可以包含在里面，接下来会说原因..）\n\n<img src=\"https://raw.githubusercontent.com/Mr-Almost/blog-generator/master/%E5%88%A9%E7%94%A8hexo%2Bgithub%20pages%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/blog1.1.png\" width=\"50%\" height=\"50%\" />\n\n\n2. 把Mr-Almost.github.io的文件夹右键用gitbash打开\n\n3. 登陆github，创建空仓库，命名与文件夹相同，即“github的用户名.github.io”\n\n\n<!--more-->\n\n\n![](https://raw.githubusercontent.com/Mr-Almost/blog-generator/master/%E5%88%A9%E7%94%A8hexo%2Bgithub%20pages%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/2.png)\n\n\n\n\n4. 在gitbash上依次输入下面的代码。（由于我已经创好了仓库所以下面的仓库名是另外打的）注意：要确保gitbash上进入的位置是Mr-Almost.github.io的文件夹\n![](https://raw.githubusercontent.com/Mr-Almost/blog-generator/master/%E5%88%A9%E7%94%A8hexo%2Bgithub%20pages%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/3.png)\n\n\n5. 然后输入 \n```\nnpm install -g hexo-cli (安装 Hexo)\nhexo init\nnpm i\nhexo init myBlog\ncd myBlog\nhexo new 开博大吉\n```\n> 我本来是想直接hexo init的..但是它弹出显示说文件不是空的不能init，好吧…那就再创一个空文件好了\n6. 这时候文件夹里多出一个myBlog的文件夹，进入打开名为_config.yml的文件\n修改最下面的deploy代码：\n![](https://raw.githubusercontent.com/Mr-Almost/blog-generator/master/%E5%88%A9%E7%94%A8hexo%2Bgithub%20pages%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/4.png)\n7. 在gitbash里输入：\n```\nnpm install hexo-deployer-git –save  （安装 git 部署插件）\nhexo deploy\n```\n8. 这时刷新github即可看到自己的博客\n\n### 搭建博客程序代码仓库\n\n打开github展示页的仓库研究了一下，发现展示页的仓库只是myBlog里的public文件夹，所以我把public的父目录myBlog改为存程序的仓库发现也是可以的~\n\n1. 在github上再次创建空仓库，名字为blog-generator,然后右键下面myBlog文件夹用gitbash打开，依次输入github上的6行代码\n2. 在gitbash依次输入下面代码即可完成。\n```\ngit add .\ngit commit -m \"xx\"\ngit push\n```\n### 总结：\n每次创建新博客可以在gitbash的myblog路径下输入： hexo new 新博客名字\n然后输入 \n```\nhexo generate\nhexo deploy\n```\n这时候展示页仓库就会更新\n那存代码的仓库如何更新? \n输入:\n```\ngit add .\ngit commit -m \"xx\"\ngit push\n```\n\nGit的指令和hexo的指令要熟悉\n谷歌了一下发现存程序代码的方法还可以用分支的方法做，有空学习一下\n","slug":"利用hexo-github-pages搭建个人博客 - 副本","published":1,"updated":"2018-05-01T15:01:33.168Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjho6oand0006v4vmok3ku5dv","content":"<h2 id=\"目标：-用一个仓库做博客展示页，一个仓库存程序代码\"><a href=\"#目标：-用一个仓库做博客展示页，一个仓库存程序代码\" class=\"headerlink\" title=\"目标： 用一个仓库做博客展示页，一个仓库存程序代码\"></a>目标： 用一个仓库做博客展示页，一个仓库存程序代码</h2><h3 id=\"搭建博客展示页仓库\"><a href=\"#搭建博客展示页仓库\" class=\"headerlink\" title=\"搭建博客展示页仓库\"></a>搭建博客展示页仓库</h3><ol>\n<li>首先在桌面创建一个文件夹做展示页的仓库 （一个仓库就够了，不需要再创建多一个文件夹做存程序代码的仓库，因为用来做存代码的仓库可以包含在里面，接下来会说原因..）</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/Mr-Almost/blog-generator/master/%E5%88%A9%E7%94%A8hexo%2Bgithub%20pages%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/blog1.1.png\" width=\"50%\" height=\"50%\"></p>\n<ol start=\"2\">\n<li><p>把Mr-Almost.github.io的文件夹右键用gitbash打开</p>\n</li>\n<li><p>登陆github，创建空仓库，命名与文件夹相同，即“github的用户名.github.io”</p>\n</li>\n</ol>\n<a id=\"more\"></a>\n<p><img src=\"https://raw.githubusercontent.com/Mr-Almost/blog-generator/master/%E5%88%A9%E7%94%A8hexo%2Bgithub%20pages%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/2.png\" alt=\"\"></p>\n<ol start=\"4\">\n<li>在gitbash上依次输入下面的代码。（由于我已经创好了仓库所以下面的仓库名是另外打的）注意：要确保gitbash上进入的位置是Mr-Almost.github.io的文件夹<br><img src=\"https://raw.githubusercontent.com/Mr-Almost/blog-generator/master/%E5%88%A9%E7%94%A8hexo%2Bgithub%20pages%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/3.png\" alt=\"\"></li>\n</ol>\n<ol start=\"5\">\n<li>然后输入 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli (安装 Hexo)</span><br><span class=\"line\">hexo init</span><br><span class=\"line\">npm i</span><br><span class=\"line\">hexo init myBlog</span><br><span class=\"line\">cd myBlog</span><br><span class=\"line\">hexo new 开博大吉</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<p>我本来是想直接hexo init的..但是它弹出显示说文件不是空的不能init，好吧…那就再创一个空文件好了</p>\n<ol start=\"6\">\n<li>这时候文件夹里多出一个myBlog的文件夹，进入打开名为_config.yml的文件<br>修改最下面的deploy代码：<br><img src=\"https://raw.githubusercontent.com/Mr-Almost/blog-generator/master/%E5%88%A9%E7%94%A8hexo%2Bgithub%20pages%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/4.png\" alt=\"\"></li>\n<li>在gitbash里输入：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git –save  （安装 git 部署插件）</span><br><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<ol start=\"8\">\n<li>这时刷新github即可看到自己的博客</li>\n</ol>\n<h3 id=\"搭建博客程序代码仓库\"><a href=\"#搭建博客程序代码仓库\" class=\"headerlink\" title=\"搭建博客程序代码仓库\"></a>搭建博客程序代码仓库</h3><p>打开github展示页的仓库研究了一下，发现展示页的仓库只是myBlog里的public文件夹，所以我把public的父目录myBlog改为存程序的仓库发现也是可以的~</p>\n<ol>\n<li>在github上再次创建空仓库，名字为blog-generator,然后右键下面myBlog文件夹用gitbash打开，依次输入github上的6行代码</li>\n<li>在gitbash依次输入下面代码即可完成。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;xx&quot;</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h3><p>每次创建新博客可以在gitbash的myblog路径下输入： hexo new 新博客名字<br>然后输入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate</span><br><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure></p>\n<p>这时候展示页仓库就会更新<br>那存代码的仓库如何更新?<br>输入:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;xx&quot;</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure></p>\n<p>Git的指令和hexo的指令要熟悉<br>谷歌了一下发现存程序代码的方法还可以用分支的方法做，有空学习一下</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"目标：-用一个仓库做博客展示页，一个仓库存程序代码\"><a href=\"#目标：-用一个仓库做博客展示页，一个仓库存程序代码\" class=\"headerlink\" title=\"目标： 用一个仓库做博客展示页，一个仓库存程序代码\"></a>目标： 用一个仓库做博客展示页，一个仓库存程序代码</h2><h3 id=\"搭建博客展示页仓库\"><a href=\"#搭建博客展示页仓库\" class=\"headerlink\" title=\"搭建博客展示页仓库\"></a>搭建博客展示页仓库</h3><ol>\n<li>首先在桌面创建一个文件夹做展示页的仓库 （一个仓库就够了，不需要再创建多一个文件夹做存程序代码的仓库，因为用来做存代码的仓库可以包含在里面，接下来会说原因..）</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/Mr-Almost/blog-generator/master/%E5%88%A9%E7%94%A8hexo%2Bgithub%20pages%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/blog1.1.png\" width=\"50%\" height=\"50%\"></p>\n<ol start=\"2\">\n<li><p>把Mr-Almost.github.io的文件夹右键用gitbash打开</p>\n</li>\n<li><p>登陆github，创建空仓库，命名与文件夹相同，即“github的用户名.github.io”</p>\n</li>\n</ol>","more":"<p><img src=\"https://raw.githubusercontent.com/Mr-Almost/blog-generator/master/%E5%88%A9%E7%94%A8hexo%2Bgithub%20pages%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/2.png\" alt=\"\"></p>\n<ol start=\"4\">\n<li>在gitbash上依次输入下面的代码。（由于我已经创好了仓库所以下面的仓库名是另外打的）注意：要确保gitbash上进入的位置是Mr-Almost.github.io的文件夹<br><img src=\"https://raw.githubusercontent.com/Mr-Almost/blog-generator/master/%E5%88%A9%E7%94%A8hexo%2Bgithub%20pages%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/3.png\" alt=\"\"></li>\n</ol>\n<ol start=\"5\">\n<li>然后输入 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli (安装 Hexo)</span><br><span class=\"line\">hexo init</span><br><span class=\"line\">npm i</span><br><span class=\"line\">hexo init myBlog</span><br><span class=\"line\">cd myBlog</span><br><span class=\"line\">hexo new 开博大吉</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<p>我本来是想直接hexo init的..但是它弹出显示说文件不是空的不能init，好吧…那就再创一个空文件好了</p>\n<ol start=\"6\">\n<li>这时候文件夹里多出一个myBlog的文件夹，进入打开名为_config.yml的文件<br>修改最下面的deploy代码：<br><img src=\"https://raw.githubusercontent.com/Mr-Almost/blog-generator/master/%E5%88%A9%E7%94%A8hexo%2Bgithub%20pages%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/4.png\" alt=\"\"></li>\n<li>在gitbash里输入：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git –save  （安装 git 部署插件）</span><br><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<ol start=\"8\">\n<li>这时刷新github即可看到自己的博客</li>\n</ol>\n<h3 id=\"搭建博客程序代码仓库\"><a href=\"#搭建博客程序代码仓库\" class=\"headerlink\" title=\"搭建博客程序代码仓库\"></a>搭建博客程序代码仓库</h3><p>打开github展示页的仓库研究了一下，发现展示页的仓库只是myBlog里的public文件夹，所以我把public的父目录myBlog改为存程序的仓库发现也是可以的~</p>\n<ol>\n<li>在github上再次创建空仓库，名字为blog-generator,然后右键下面myBlog文件夹用gitbash打开，依次输入github上的6行代码</li>\n<li>在gitbash依次输入下面代码即可完成。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;xx&quot;</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h3><p>每次创建新博客可以在gitbash的myblog路径下输入： hexo new 新博客名字<br>然后输入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate</span><br><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure></p>\n<p>这时候展示页仓库就会更新<br>那存代码的仓库如何更新?<br>输入:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;xx&quot;</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure></p>\n<p>Git的指令和hexo的指令要熟悉<br>谷歌了一下发现存程序代码的方法还可以用分支的方法做，有空学习一下</p>"},{"title":"实习第二周","date":"2018-05-24T10:02:22.000Z","_content":"## 5月10日开始实习，今天是第二周\n## 第一天\n熟悉环境，搭建了nginx服务器，用php+sql数据库实现一个本地网页。\n## 第二天\n## 熟悉公司项目的业务与代码\n艾特智能科技公司最近在做一个智慧小区的项目，要求在web端+app端+室内机实现社区硬件与软件服务的结合，比如业主通过app实现物业操作，管理人员通过web端查看物业管理信息，室内机具有信息推送的收发功能等。我目前做的项目是智慧小区的web端开发。带我的刘哥目前已经完成了楼宇管理和人员管理功能的开发，我的任务是一个星期做出物资管理操作。\n我花了一天时间熟悉了他目前的代码：\n- 结构说明：前后端未分离，均通过服务器传php到浏览器。前端主要使用了bootstrap和jquery，ajax传数据以及url路由到后端，后端方面php用了CI框架以及MVC包括控制层controller、数据层model、视图层view。\n- 前后端的数据传递： view -> controller通过ajax选择post/get方法和对应的controller方法：当选择get方法时，参数可通过url的查询参数传入controller并得到相应的网页；当选择post方法时，参数通过post的数据包传入controller并得到相应的网页。\n- 后端与数据库数据处理：controller ->model controller的方法命名与model的方法命名相同，controller得到页面传来的参数后传入model层，model层里编写sql语句操作数据之后返回到controller层，再由controller层返回到view层。\n\n## 该项目代码不足：\n1. 目前在view层夹杂着很多php的代码，并未完全分离\n2. 页面内容相似，但每次都要对页面修改大量变量，我认为可以做函数化或者用vue做到组件化\n\n## 收获\n- 在第一个星期内完成了物资列表管理的页面开发，并优化了小部分的代码结构。\n- 在第二个星期完成物资状态管理的页面开发，主要还是物资列表与物资状态管理两个页面之间数据库sql语句和业务逻辑的熟悉。","source":"_posts/实习第二周.md","raw":"---\ntitle: 实习第二周\ndate: 2018-05-24 18:02:22\ntags:\n---\n## 5月10日开始实习，今天是第二周\n## 第一天\n熟悉环境，搭建了nginx服务器，用php+sql数据库实现一个本地网页。\n## 第二天\n## 熟悉公司项目的业务与代码\n艾特智能科技公司最近在做一个智慧小区的项目，要求在web端+app端+室内机实现社区硬件与软件服务的结合，比如业主通过app实现物业操作，管理人员通过web端查看物业管理信息，室内机具有信息推送的收发功能等。我目前做的项目是智慧小区的web端开发。带我的刘哥目前已经完成了楼宇管理和人员管理功能的开发，我的任务是一个星期做出物资管理操作。\n我花了一天时间熟悉了他目前的代码：\n- 结构说明：前后端未分离，均通过服务器传php到浏览器。前端主要使用了bootstrap和jquery，ajax传数据以及url路由到后端，后端方面php用了CI框架以及MVC包括控制层controller、数据层model、视图层view。\n- 前后端的数据传递： view -> controller通过ajax选择post/get方法和对应的controller方法：当选择get方法时，参数可通过url的查询参数传入controller并得到相应的网页；当选择post方法时，参数通过post的数据包传入controller并得到相应的网页。\n- 后端与数据库数据处理：controller ->model controller的方法命名与model的方法命名相同，controller得到页面传来的参数后传入model层，model层里编写sql语句操作数据之后返回到controller层，再由controller层返回到view层。\n\n## 该项目代码不足：\n1. 目前在view层夹杂着很多php的代码，并未完全分离\n2. 页面内容相似，但每次都要对页面修改大量变量，我认为可以做函数化或者用vue做到组件化\n\n## 收获\n- 在第一个星期内完成了物资列表管理的页面开发，并优化了小部分的代码结构。\n- 在第二个星期完成物资状态管理的页面开发，主要还是物资列表与物资状态管理两个页面之间数据库sql语句和业务逻辑的熟悉。","slug":"实习第二周","published":1,"updated":"2018-05-27T02:16:06.809Z","_id":"cjho6oang0007v4vmpjmgdr1r","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"5月10日开始实习，今天是第二周\"><a href=\"#5月10日开始实习，今天是第二周\" class=\"headerlink\" title=\"5月10日开始实习，今天是第二周\"></a>5月10日开始实习，今天是第二周</h2><h2 id=\"第一天\"><a href=\"#第一天\" class=\"headerlink\" title=\"第一天\"></a>第一天</h2><p>熟悉环境，搭建了nginx服务器，用php+sql数据库实现一个本地网页。</p>\n<h2 id=\"第二天\"><a href=\"#第二天\" class=\"headerlink\" title=\"第二天\"></a>第二天</h2><h2 id=\"熟悉公司项目的业务与代码\"><a href=\"#熟悉公司项目的业务与代码\" class=\"headerlink\" title=\"熟悉公司项目的业务与代码\"></a>熟悉公司项目的业务与代码</h2><p>艾特智能科技公司最近在做一个智慧小区的项目，要求在web端+app端+室内机实现社区硬件与软件服务的结合，比如业主通过app实现物业操作，管理人员通过web端查看物业管理信息，室内机具有信息推送的收发功能等。我目前做的项目是智慧小区的web端开发。带我的刘哥目前已经完成了楼宇管理和人员管理功能的开发，我的任务是一个星期做出物资管理操作。<br>我花了一天时间熟悉了他目前的代码：</p>\n<ul>\n<li>结构说明：前后端未分离，均通过服务器传php到浏览器。前端主要使用了bootstrap和jquery，ajax传数据以及url路由到后端，后端方面php用了CI框架以及MVC包括控制层controller、数据层model、视图层view。</li>\n<li>前后端的数据传递： view -&gt; controller通过ajax选择post/get方法和对应的controller方法：当选择get方法时，参数可通过url的查询参数传入controller并得到相应的网页；当选择post方法时，参数通过post的数据包传入controller并得到相应的网页。</li>\n<li>后端与数据库数据处理：controller -&gt;model controller的方法命名与model的方法命名相同，controller得到页面传来的参数后传入model层，model层里编写sql语句操作数据之后返回到controller层，再由controller层返回到view层。</li>\n</ul>\n<h2 id=\"该项目代码不足：\"><a href=\"#该项目代码不足：\" class=\"headerlink\" title=\"该项目代码不足：\"></a>该项目代码不足：</h2><ol>\n<li>目前在view层夹杂着很多php的代码，并未完全分离</li>\n<li>页面内容相似，但每次都要对页面修改大量变量，我认为可以做函数化或者用vue做到组件化</li>\n</ol>\n<h2 id=\"收获\"><a href=\"#收获\" class=\"headerlink\" title=\"收获\"></a>收获</h2><ul>\n<li>在第一个星期内完成了物资列表管理的页面开发，并优化了小部分的代码结构。</li>\n<li>在第二个星期完成物资状态管理的页面开发，主要还是物资列表与物资状态管理两个页面之间数据库sql语句和业务逻辑的熟悉。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"5月10日开始实习，今天是第二周\"><a href=\"#5月10日开始实习，今天是第二周\" class=\"headerlink\" title=\"5月10日开始实习，今天是第二周\"></a>5月10日开始实习，今天是第二周</h2><h2 id=\"第一天\"><a href=\"#第一天\" class=\"headerlink\" title=\"第一天\"></a>第一天</h2><p>熟悉环境，搭建了nginx服务器，用php+sql数据库实现一个本地网页。</p>\n<h2 id=\"第二天\"><a href=\"#第二天\" class=\"headerlink\" title=\"第二天\"></a>第二天</h2><h2 id=\"熟悉公司项目的业务与代码\"><a href=\"#熟悉公司项目的业务与代码\" class=\"headerlink\" title=\"熟悉公司项目的业务与代码\"></a>熟悉公司项目的业务与代码</h2><p>艾特智能科技公司最近在做一个智慧小区的项目，要求在web端+app端+室内机实现社区硬件与软件服务的结合，比如业主通过app实现物业操作，管理人员通过web端查看物业管理信息，室内机具有信息推送的收发功能等。我目前做的项目是智慧小区的web端开发。带我的刘哥目前已经完成了楼宇管理和人员管理功能的开发，我的任务是一个星期做出物资管理操作。<br>我花了一天时间熟悉了他目前的代码：</p>\n<ul>\n<li>结构说明：前后端未分离，均通过服务器传php到浏览器。前端主要使用了bootstrap和jquery，ajax传数据以及url路由到后端，后端方面php用了CI框架以及MVC包括控制层controller、数据层model、视图层view。</li>\n<li>前后端的数据传递： view -&gt; controller通过ajax选择post/get方法和对应的controller方法：当选择get方法时，参数可通过url的查询参数传入controller并得到相应的网页；当选择post方法时，参数通过post的数据包传入controller并得到相应的网页。</li>\n<li>后端与数据库数据处理：controller -&gt;model controller的方法命名与model的方法命名相同，controller得到页面传来的参数后传入model层，model层里编写sql语句操作数据之后返回到controller层，再由controller层返回到view层。</li>\n</ul>\n<h2 id=\"该项目代码不足：\"><a href=\"#该项目代码不足：\" class=\"headerlink\" title=\"该项目代码不足：\"></a>该项目代码不足：</h2><ol>\n<li>目前在view层夹杂着很多php的代码，并未完全分离</li>\n<li>页面内容相似，但每次都要对页面修改大量变量，我认为可以做函数化或者用vue做到组件化</li>\n</ol>\n<h2 id=\"收获\"><a href=\"#收获\" class=\"headerlink\" title=\"收获\"></a>收获</h2><ul>\n<li>在第一个星期内完成了物资列表管理的页面开发，并优化了小部分的代码结构。</li>\n<li>在第二个星期完成物资状态管理的页面开发，主要还是物资列表与物资状态管理两个页面之间数据库sql语句和业务逻辑的熟悉。</li>\n</ul>\n"},{"title":"命令行与脚本","date":"2018-04-04T10:02:22.000Z","_content":"本文有三个目的：\n1.如何简化命令行\n2.创建bash脚本 & 写bash脚本\n3.创建js脚本 & 写js脚本\n\n## 简化命令行\n**自动运行**\n目的：打开gitbash自动进入桌面目录\n操作： 在 .bashrc里添加cd  ~/Desktop\n\n**Alias指令别名 （可以缩写指令）**\n目的：定义一个指令的缩写，如：输入f可以打印fank is awesome\n操作：在 .bashrc里添加alias f=\"echo 'frank is awesome'\"\n\n**Path路径 （把一个文件夹放进path路径，可以用来创建脚本）**\n目的：把文件夹放进path路径\n操作：export PATH=\"目录的绝对路径:$PATH\"\n\n##  创建bash脚本\n目的：创建一个名为demo的bash脚本\n操作：\n\n```\ncd ~/local\ntouch demo\nstart demo\n(编辑demo内容为想要的内容)\nsh ~/local/demo  \n\n//这一步已大致完成了所需内容，不过要简化指令：减去sh与路径//\n//在.bashrc内添加以下两句//\n\nexport PATH=\"目录的绝对路径:$PATH\" \nSource ~/.bashrc\n```\n此时只需要输入demo就可以执行demo文件里编辑的内容\n\n\n\n**如果想把demo改为demo.sh**\n操作： \nmv ~/local/demo  ~/local/demo.sh  //修改后缀\n\n\n**查询命令的路径：**\n      使用 type demo 可以看到寻找过程\n      使用 which demo 可以看到寻找结果\n\n\n\n\n\n## 写bash脚本\n目的：输入demo即可生成名字为demo的目录 \n操作： 在demo文件里编辑以下内容\n```\nmkdir demo\n   cd demo\nmkdir css js\ntouch index.html css/style.css js/main.js\n      exit\n```\n\n**目的升级：输入demo + 文件夹名字xxx，生成名字为xxx的目录**\n操作： 在demo文件里编辑以下内容\n```\nmkdir $1\ncd $1\nmkdir css js\ntouch index.html css/style.css js/main.js\nExit\n```\n*此处：$1的意思为输入的第一个参数*\n\n\n\n\n\n**目的二次升级：判断目录是否已存在**\n操作：在demo文件里编辑以下内容\n```\nif [ -d $1 ]; then\n \t\techo 'error: dir exists'\n \t\texit\nelse\n\t\t\t mkdir $1\n \t\t\tcd $1\n \t\t\tmkdir css js\n \t\t\ttouch index.html css/style.css js/main.js\n \t\t\techo 'success'\n \t\t\texit\nFi\n```\n*exit 0 表示没有错误*\n*exit 1 表示错误代码为 1*\n\n\n\n\n\n## 语法规则\ndemo && echo '结束' 表示只有在 demo 成功时，才会执行 echo '结束'\ndemo || echo '结束' 表示只有在 demo 失败时，才会执行 echo '结束'\ndemo ; echo '结束' 表示执行了demo之后才会执行 echo '结束'\n\n## 创建Js脚本\n目的：输入demo即可生成名字为demo的目录\n操作：与bash大致相同：\n```\ncd ~/local\nTouch demo\nStart demo\n编辑demo\nnode ~/local/demo          //此处需要注意： 不能用sh，而是node，因为语言不同\n\n//这一步已大致完成了所需内容，不过要简化指令：减去node与路径//\n//在.bashrc内添加以下一句//\n\n#!/usr/bin/env node     //shebang，用于指定执行环境\n```\n此时只需要输入demo就可以执行demo文件里编辑的内容\n\n\n## 写Js脚本\n目的升级：输入demo + 文件夹名字xxx，生成名字为xxx的目录\n操作： 在demo文件里编辑以下内容\n```\nvar fs = require('fs')\n\nvar dirName = process.argv[2] // 你传的参数是从第 2 个开始的\n\nfs.mkdirSync(\"./\" + dirName) // mkdir $1\nprocess.chdir(\"./\" + dirName) // cd $1\nfs.mkdirSync('css') // mkdir css\nfs.mkdirSync('js') // mkdir js\nfs.writeFileSync(\"./index.html\", \"\")\nfs.writeFileSync(\"css/style.css\", \"\")\nfs.writeFileSync(\"./js/main.js\", \"\")\n\nprocess.exit(0)\n```\n\n>Js学习网址：http://nodejs/org/api","source":"_posts/命令行与脚本.md","raw":"---\ntitle: 命令行与脚本\ndate: 2018-04-4 18:02:22\ntags:\n---\n本文有三个目的：\n1.如何简化命令行\n2.创建bash脚本 & 写bash脚本\n3.创建js脚本 & 写js脚本\n\n## 简化命令行\n**自动运行**\n目的：打开gitbash自动进入桌面目录\n操作： 在 .bashrc里添加cd  ~/Desktop\n\n**Alias指令别名 （可以缩写指令）**\n目的：定义一个指令的缩写，如：输入f可以打印fank is awesome\n操作：在 .bashrc里添加alias f=\"echo 'frank is awesome'\"\n\n**Path路径 （把一个文件夹放进path路径，可以用来创建脚本）**\n目的：把文件夹放进path路径\n操作：export PATH=\"目录的绝对路径:$PATH\"\n\n##  创建bash脚本\n目的：创建一个名为demo的bash脚本\n操作：\n\n```\ncd ~/local\ntouch demo\nstart demo\n(编辑demo内容为想要的内容)\nsh ~/local/demo  \n\n//这一步已大致完成了所需内容，不过要简化指令：减去sh与路径//\n//在.bashrc内添加以下两句//\n\nexport PATH=\"目录的绝对路径:$PATH\" \nSource ~/.bashrc\n```\n此时只需要输入demo就可以执行demo文件里编辑的内容\n\n\n\n**如果想把demo改为demo.sh**\n操作： \nmv ~/local/demo  ~/local/demo.sh  //修改后缀\n\n\n**查询命令的路径：**\n      使用 type demo 可以看到寻找过程\n      使用 which demo 可以看到寻找结果\n\n\n\n\n\n## 写bash脚本\n目的：输入demo即可生成名字为demo的目录 \n操作： 在demo文件里编辑以下内容\n```\nmkdir demo\n   cd demo\nmkdir css js\ntouch index.html css/style.css js/main.js\n      exit\n```\n\n**目的升级：输入demo + 文件夹名字xxx，生成名字为xxx的目录**\n操作： 在demo文件里编辑以下内容\n```\nmkdir $1\ncd $1\nmkdir css js\ntouch index.html css/style.css js/main.js\nExit\n```\n*此处：$1的意思为输入的第一个参数*\n\n\n\n\n\n**目的二次升级：判断目录是否已存在**\n操作：在demo文件里编辑以下内容\n```\nif [ -d $1 ]; then\n \t\techo 'error: dir exists'\n \t\texit\nelse\n\t\t\t mkdir $1\n \t\t\tcd $1\n \t\t\tmkdir css js\n \t\t\ttouch index.html css/style.css js/main.js\n \t\t\techo 'success'\n \t\t\texit\nFi\n```\n*exit 0 表示没有错误*\n*exit 1 表示错误代码为 1*\n\n\n\n\n\n## 语法规则\ndemo && echo '结束' 表示只有在 demo 成功时，才会执行 echo '结束'\ndemo || echo '结束' 表示只有在 demo 失败时，才会执行 echo '结束'\ndemo ; echo '结束' 表示执行了demo之后才会执行 echo '结束'\n\n## 创建Js脚本\n目的：输入demo即可生成名字为demo的目录\n操作：与bash大致相同：\n```\ncd ~/local\nTouch demo\nStart demo\n编辑demo\nnode ~/local/demo          //此处需要注意： 不能用sh，而是node，因为语言不同\n\n//这一步已大致完成了所需内容，不过要简化指令：减去node与路径//\n//在.bashrc内添加以下一句//\n\n#!/usr/bin/env node     //shebang，用于指定执行环境\n```\n此时只需要输入demo就可以执行demo文件里编辑的内容\n\n\n## 写Js脚本\n目的升级：输入demo + 文件夹名字xxx，生成名字为xxx的目录\n操作： 在demo文件里编辑以下内容\n```\nvar fs = require('fs')\n\nvar dirName = process.argv[2] // 你传的参数是从第 2 个开始的\n\nfs.mkdirSync(\"./\" + dirName) // mkdir $1\nprocess.chdir(\"./\" + dirName) // cd $1\nfs.mkdirSync('css') // mkdir css\nfs.mkdirSync('js') // mkdir js\nfs.writeFileSync(\"./index.html\", \"\")\nfs.writeFileSync(\"css/style.css\", \"\")\nfs.writeFileSync(\"./js/main.js\", \"\")\n\nprocess.exit(0)\n```\n\n>Js学习网址：http://nodejs/org/api","slug":"命令行与脚本","published":1,"updated":"2018-05-01T15:33:57.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjho6oanj0008v4vmqiyrctm2","content":"<p>本文有三个目的：<br>1.如何简化命令行<br>2.创建bash脚本 &amp; 写bash脚本<br>3.创建js脚本 &amp; 写js脚本</p>\n<h2 id=\"简化命令行\"><a href=\"#简化命令行\" class=\"headerlink\" title=\"简化命令行\"></a>简化命令行</h2><p><strong>自动运行</strong><br>目的：打开gitbash自动进入桌面目录<br>操作： 在 .bashrc里添加cd  ~/Desktop</p>\n<p><strong>Alias指令别名 （可以缩写指令）</strong><br>目的：定义一个指令的缩写，如：输入f可以打印fank is awesome<br>操作：在 .bashrc里添加alias f=”echo ‘frank is awesome’”</p>\n<p><strong>Path路径 （把一个文件夹放进path路径，可以用来创建脚本）</strong><br>目的：把文件夹放进path路径<br>操作：export PATH=”目录的绝对路径:$PATH”</p>\n<h2 id=\"创建bash脚本\"><a href=\"#创建bash脚本\" class=\"headerlink\" title=\"创建bash脚本\"></a>创建bash脚本</h2><p>目的：创建一个名为demo的bash脚本<br>操作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/local</span><br><span class=\"line\">touch demo</span><br><span class=\"line\">start demo</span><br><span class=\"line\">(编辑demo内容为想要的内容)</span><br><span class=\"line\">sh ~/local/demo  </span><br><span class=\"line\"></span><br><span class=\"line\">//这一步已大致完成了所需内容，不过要简化指令：减去sh与路径//</span><br><span class=\"line\">//在.bashrc内添加以下两句//</span><br><span class=\"line\"></span><br><span class=\"line\">export PATH=&quot;目录的绝对路径:$PATH&quot; </span><br><span class=\"line\">Source ~/.bashrc</span><br></pre></td></tr></table></figure>\n<p>此时只需要输入demo就可以执行demo文件里编辑的内容</p>\n<p><strong>如果想把demo改为demo.sh</strong><br>操作：<br>mv ~/local/demo  ~/local/demo.sh  //修改后缀</p>\n<p><strong>查询命令的路径：</strong><br>      使用 type demo 可以看到寻找过程<br>      使用 which demo 可以看到寻找结果</p>\n<h2 id=\"写bash脚本\"><a href=\"#写bash脚本\" class=\"headerlink\" title=\"写bash脚本\"></a>写bash脚本</h2><p>目的：输入demo即可生成名字为demo的目录<br>操作： 在demo文件里编辑以下内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir demo</span><br><span class=\"line\">   cd demo</span><br><span class=\"line\">mkdir css js</span><br><span class=\"line\">touch index.html css/style.css js/main.js</span><br><span class=\"line\">      exit</span><br></pre></td></tr></table></figure></p>\n<p><strong>目的升级：输入demo + 文件夹名字xxx，生成名字为xxx的目录</strong><br>操作： 在demo文件里编辑以下内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir $1</span><br><span class=\"line\">cd $1</span><br><span class=\"line\">mkdir css js</span><br><span class=\"line\">touch index.html css/style.css js/main.js</span><br><span class=\"line\">Exit</span><br></pre></td></tr></table></figure></p>\n<p><em>此处：$1的意思为输入的第一个参数</em></p>\n<p><strong>目的二次升级：判断目录是否已存在</strong><br>操作：在demo文件里编辑以下内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if [ -d $1 ]; then</span><br><span class=\"line\"> \t\techo &apos;error: dir exists&apos;</span><br><span class=\"line\"> \t\texit</span><br><span class=\"line\">else</span><br><span class=\"line\">\t\t\t mkdir $1</span><br><span class=\"line\"> \t\t\tcd $1</span><br><span class=\"line\"> \t\t\tmkdir css js</span><br><span class=\"line\"> \t\t\ttouch index.html css/style.css js/main.js</span><br><span class=\"line\"> \t\t\techo &apos;success&apos;</span><br><span class=\"line\"> \t\t\texit</span><br><span class=\"line\">Fi</span><br></pre></td></tr></table></figure></p>\n<p><em>exit 0 表示没有错误</em><br><em>exit 1 表示错误代码为 1</em></p>\n<h2 id=\"语法规则\"><a href=\"#语法规则\" class=\"headerlink\" title=\"语法规则\"></a>语法规则</h2><p>demo &amp;&amp; echo ‘结束’ 表示只有在 demo 成功时，才会执行 echo ‘结束’<br>demo || echo ‘结束’ 表示只有在 demo 失败时，才会执行 echo ‘结束’<br>demo ; echo ‘结束’ 表示执行了demo之后才会执行 echo ‘结束’</p>\n<h2 id=\"创建Js脚本\"><a href=\"#创建Js脚本\" class=\"headerlink\" title=\"创建Js脚本\"></a>创建Js脚本</h2><p>目的：输入demo即可生成名字为demo的目录<br>操作：与bash大致相同：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/local</span><br><span class=\"line\">Touch demo</span><br><span class=\"line\">Start demo</span><br><span class=\"line\">编辑demo</span><br><span class=\"line\">node ~/local/demo          //此处需要注意： 不能用sh，而是node，因为语言不同</span><br><span class=\"line\"></span><br><span class=\"line\">//这一步已大致完成了所需内容，不过要简化指令：减去node与路径//</span><br><span class=\"line\">//在.bashrc内添加以下一句//</span><br><span class=\"line\"></span><br><span class=\"line\">#!/usr/bin/env node     //shebang，用于指定执行环境</span><br></pre></td></tr></table></figure></p>\n<p>此时只需要输入demo就可以执行demo文件里编辑的内容</p>\n<h2 id=\"写Js脚本\"><a href=\"#写Js脚本\" class=\"headerlink\" title=\"写Js脚本\"></a>写Js脚本</h2><p>目的升级：输入demo + 文件夹名字xxx，生成名字为xxx的目录<br>操作： 在demo文件里编辑以下内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fs = require(&apos;fs&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">var dirName = process.argv[2] // 你传的参数是从第 2 个开始的</span><br><span class=\"line\"></span><br><span class=\"line\">fs.mkdirSync(&quot;./&quot; + dirName) // mkdir $1</span><br><span class=\"line\">process.chdir(&quot;./&quot; + dirName) // cd $1</span><br><span class=\"line\">fs.mkdirSync(&apos;css&apos;) // mkdir css</span><br><span class=\"line\">fs.mkdirSync(&apos;js&apos;) // mkdir js</span><br><span class=\"line\">fs.writeFileSync(&quot;./index.html&quot;, &quot;&quot;)</span><br><span class=\"line\">fs.writeFileSync(&quot;css/style.css&quot;, &quot;&quot;)</span><br><span class=\"line\">fs.writeFileSync(&quot;./js/main.js&quot;, &quot;&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">process.exit(0)</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>Js学习网址：<a href=\"http://nodejs/org/api\" target=\"_blank\" rel=\"noopener\">http://nodejs/org/api</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>本文有三个目的：<br>1.如何简化命令行<br>2.创建bash脚本 &amp; 写bash脚本<br>3.创建js脚本 &amp; 写js脚本</p>\n<h2 id=\"简化命令行\"><a href=\"#简化命令行\" class=\"headerlink\" title=\"简化命令行\"></a>简化命令行</h2><p><strong>自动运行</strong><br>目的：打开gitbash自动进入桌面目录<br>操作： 在 .bashrc里添加cd  ~/Desktop</p>\n<p><strong>Alias指令别名 （可以缩写指令）</strong><br>目的：定义一个指令的缩写，如：输入f可以打印fank is awesome<br>操作：在 .bashrc里添加alias f=”echo ‘frank is awesome’”</p>\n<p><strong>Path路径 （把一个文件夹放进path路径，可以用来创建脚本）</strong><br>目的：把文件夹放进path路径<br>操作：export PATH=”目录的绝对路径:$PATH”</p>\n<h2 id=\"创建bash脚本\"><a href=\"#创建bash脚本\" class=\"headerlink\" title=\"创建bash脚本\"></a>创建bash脚本</h2><p>目的：创建一个名为demo的bash脚本<br>操作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/local</span><br><span class=\"line\">touch demo</span><br><span class=\"line\">start demo</span><br><span class=\"line\">(编辑demo内容为想要的内容)</span><br><span class=\"line\">sh ~/local/demo  </span><br><span class=\"line\"></span><br><span class=\"line\">//这一步已大致完成了所需内容，不过要简化指令：减去sh与路径//</span><br><span class=\"line\">//在.bashrc内添加以下两句//</span><br><span class=\"line\"></span><br><span class=\"line\">export PATH=&quot;目录的绝对路径:$PATH&quot; </span><br><span class=\"line\">Source ~/.bashrc</span><br></pre></td></tr></table></figure>\n<p>此时只需要输入demo就可以执行demo文件里编辑的内容</p>\n<p><strong>如果想把demo改为demo.sh</strong><br>操作：<br>mv ~/local/demo  ~/local/demo.sh  //修改后缀</p>\n<p><strong>查询命令的路径：</strong><br>      使用 type demo 可以看到寻找过程<br>      使用 which demo 可以看到寻找结果</p>\n<h2 id=\"写bash脚本\"><a href=\"#写bash脚本\" class=\"headerlink\" title=\"写bash脚本\"></a>写bash脚本</h2><p>目的：输入demo即可生成名字为demo的目录<br>操作： 在demo文件里编辑以下内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir demo</span><br><span class=\"line\">   cd demo</span><br><span class=\"line\">mkdir css js</span><br><span class=\"line\">touch index.html css/style.css js/main.js</span><br><span class=\"line\">      exit</span><br></pre></td></tr></table></figure></p>\n<p><strong>目的升级：输入demo + 文件夹名字xxx，生成名字为xxx的目录</strong><br>操作： 在demo文件里编辑以下内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir $1</span><br><span class=\"line\">cd $1</span><br><span class=\"line\">mkdir css js</span><br><span class=\"line\">touch index.html css/style.css js/main.js</span><br><span class=\"line\">Exit</span><br></pre></td></tr></table></figure></p>\n<p><em>此处：$1的意思为输入的第一个参数</em></p>\n<p><strong>目的二次升级：判断目录是否已存在</strong><br>操作：在demo文件里编辑以下内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if [ -d $1 ]; then</span><br><span class=\"line\"> \t\techo &apos;error: dir exists&apos;</span><br><span class=\"line\"> \t\texit</span><br><span class=\"line\">else</span><br><span class=\"line\">\t\t\t mkdir $1</span><br><span class=\"line\"> \t\t\tcd $1</span><br><span class=\"line\"> \t\t\tmkdir css js</span><br><span class=\"line\"> \t\t\ttouch index.html css/style.css js/main.js</span><br><span class=\"line\"> \t\t\techo &apos;success&apos;</span><br><span class=\"line\"> \t\t\texit</span><br><span class=\"line\">Fi</span><br></pre></td></tr></table></figure></p>\n<p><em>exit 0 表示没有错误</em><br><em>exit 1 表示错误代码为 1</em></p>\n<h2 id=\"语法规则\"><a href=\"#语法规则\" class=\"headerlink\" title=\"语法规则\"></a>语法规则</h2><p>demo &amp;&amp; echo ‘结束’ 表示只有在 demo 成功时，才会执行 echo ‘结束’<br>demo || echo ‘结束’ 表示只有在 demo 失败时，才会执行 echo ‘结束’<br>demo ; echo ‘结束’ 表示执行了demo之后才会执行 echo ‘结束’</p>\n<h2 id=\"创建Js脚本\"><a href=\"#创建Js脚本\" class=\"headerlink\" title=\"创建Js脚本\"></a>创建Js脚本</h2><p>目的：输入demo即可生成名字为demo的目录<br>操作：与bash大致相同：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/local</span><br><span class=\"line\">Touch demo</span><br><span class=\"line\">Start demo</span><br><span class=\"line\">编辑demo</span><br><span class=\"line\">node ~/local/demo          //此处需要注意： 不能用sh，而是node，因为语言不同</span><br><span class=\"line\"></span><br><span class=\"line\">//这一步已大致完成了所需内容，不过要简化指令：减去node与路径//</span><br><span class=\"line\">//在.bashrc内添加以下一句//</span><br><span class=\"line\"></span><br><span class=\"line\">#!/usr/bin/env node     //shebang，用于指定执行环境</span><br></pre></td></tr></table></figure></p>\n<p>此时只需要输入demo就可以执行demo文件里编辑的内容</p>\n<h2 id=\"写Js脚本\"><a href=\"#写Js脚本\" class=\"headerlink\" title=\"写Js脚本\"></a>写Js脚本</h2><p>目的升级：输入demo + 文件夹名字xxx，生成名字为xxx的目录<br>操作： 在demo文件里编辑以下内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fs = require(&apos;fs&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">var dirName = process.argv[2] // 你传的参数是从第 2 个开始的</span><br><span class=\"line\"></span><br><span class=\"line\">fs.mkdirSync(&quot;./&quot; + dirName) // mkdir $1</span><br><span class=\"line\">process.chdir(&quot;./&quot; + dirName) // cd $1</span><br><span class=\"line\">fs.mkdirSync(&apos;css&apos;) // mkdir css</span><br><span class=\"line\">fs.mkdirSync(&apos;js&apos;) // mkdir js</span><br><span class=\"line\">fs.writeFileSync(&quot;./index.html&quot;, &quot;&quot;)</span><br><span class=\"line\">fs.writeFileSync(&quot;css/style.css&quot;, &quot;&quot;)</span><br><span class=\"line\">fs.writeFileSync(&quot;./js/main.js&quot;, &quot;&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">process.exit(0)</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>Js学习网址：<a href=\"http://nodejs/org/api\" target=\"_blank\" rel=\"noopener\">http://nodejs/org/api</a></p>\n</blockquote>\n"},{"title":"开博大吉","date":"2018-03-22T11:19:57.000Z","_content":"我是翟俊豪","source":"_posts/开博大吉.md","raw":"---\ntitle: 开博大吉\ndate: 2018-03-22 19:19:57\ntags:\n---\n我是翟俊豪","slug":"开博大吉","published":1,"updated":"2018-05-16T15:01:11.287Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjho6oanm0009v4vm40vhkpln","content":"<p>我是翟俊豪</p>\n","site":{"data":{}},"excerpt":"","more":"<p>我是翟俊豪</p>\n"},{"title":"服务器","date":"2018-04-06T10:02:22.000Z","_content":"## Http请求\n请求一般是get和post\n\n**输入：curl -s -v -H \"Frank: xxx\" -- \"https://www.baidu.com\"**\n\n**浏览器显示：**\n```\nGET / HTTP/1.1\nHost: www.baidu.com\nUser-Agent: curl/7.54.0\nAccept: */*\nFrank: xxx\n```\n\n**输入：curl -X POST -s -v -H \"Frank: xxx\" -- \"https://www.baidu.com\"**\n\n**浏览器显示：**\n```\nPOST / HTTP/1.1\nHost: www.baidu.com\nUser-Agent: curl/7.54.0\nAccept: */*\nFrank: xxx\n```\n\n**浏览器显示格式：**\n```\n1动词 路径 协议/版本\n2Key1: value1\n2Key2: value2\n2Key3: value3\n2Content-Type: application/x-www-form-urlencoded\n2Host: www.baidu.com\n2User-Agent: curl/7.54.0\n3\n4要上传的数据\n```\n\n- 请求最多包含四部分，最少包含三部分。（也就是说第四部分可以为空）\n- 第三部分永远都是一个回车（\\n）\n- 动词有 GET  POST  PUT  PATCH  DELETE  HEAD  OPTIONS 等\n- 这里的路径包括「查询参数」，但不包括「锚点」\n- 如果你没有写路径，那么路径默认为 /\n- 第 2 部分中的 Content-Type 标注了第 4 部分的格式\n\n\n## Http响应\n**浏览器显示：**\n\n1 协议/版本号 状态码 状态解释\n2 Key1: value1\n2 Key2: value2\n2 Content-Length: 17931\n2 Content-Type: text/html\n3\n4 要下载的内容\n\n\n**状态码要背，是服务器对浏览器说的话：**\n```\n1xx 不常用\n2xx 表示成功\n3xx 表示滚吧\n4xx 表示你丫错了\n5xx 表示好吧，我错了\n状态解释没什么用\n第 2 部分中的 Content-Type 标注了第 4 部分的格式\n第 2 部分中的 Content-Type 遵循 MIME 规范\n```\n\n**IP**\n- 一般默认情况下，hosts 文件里会有一行127.0.0.1 localhost，意思就是 localhost 指向 127.0.0.1，所以 localhost 也表示设备自己。\n- 路由会给自己分配一个好记的内网 IP，如 192.168.1.1\n\n\n**做一个服务器**\n```\ncd ~/Desktop; \nmkdir node-demo; \ncd node-demo\ntouch server.js\n编辑 server.js （下图为编辑内容）\nnode server.js 8888\n```\n另外开一个gitbash窗口输入以下内容，观察效果即可\n```\ncurl http://localhost:你的指定的端口/xxx \n```\n或者直接在浏览器输入\n```\nhttp://localhost:你的指定的端口/xxx \n```\n\n效果：\n```\n用户请求 / 时，返回 html 内容\n该 html 内容里面由一个 css link 和一个 script\ncss link 会请求 /style.css，返回 css 内容\nscript 会请求 /main.js，返回 js 内容\n请求 / /style.css /main.js 以外的路径，则一律返回 404 状态码\n```\n\n- 文件内容是有 HTTP 头中的 Content-Type 保证的。content-type后面的东西才有用\n- 输入路径的/xxx没有用，不能代表什么，不要被迷惑。\n- 如果server.js内加上以下内容，会得到hi%。这个 % 不是我们的内容，% 表示结尾。如果不喜欢，把 'Hi' 换成 'Hi\\n'。\n```\nresponse.write('Hi') \nresponse.end()   \n```","source":"_posts/服务器.md","raw":"---\ntitle: 服务器\ndate: 2018-04-6 18:02:22\ntags:\n---\n## Http请求\n请求一般是get和post\n\n**输入：curl -s -v -H \"Frank: xxx\" -- \"https://www.baidu.com\"**\n\n**浏览器显示：**\n```\nGET / HTTP/1.1\nHost: www.baidu.com\nUser-Agent: curl/7.54.0\nAccept: */*\nFrank: xxx\n```\n\n**输入：curl -X POST -s -v -H \"Frank: xxx\" -- \"https://www.baidu.com\"**\n\n**浏览器显示：**\n```\nPOST / HTTP/1.1\nHost: www.baidu.com\nUser-Agent: curl/7.54.0\nAccept: */*\nFrank: xxx\n```\n\n**浏览器显示格式：**\n```\n1动词 路径 协议/版本\n2Key1: value1\n2Key2: value2\n2Key3: value3\n2Content-Type: application/x-www-form-urlencoded\n2Host: www.baidu.com\n2User-Agent: curl/7.54.0\n3\n4要上传的数据\n```\n\n- 请求最多包含四部分，最少包含三部分。（也就是说第四部分可以为空）\n- 第三部分永远都是一个回车（\\n）\n- 动词有 GET  POST  PUT  PATCH  DELETE  HEAD  OPTIONS 等\n- 这里的路径包括「查询参数」，但不包括「锚点」\n- 如果你没有写路径，那么路径默认为 /\n- 第 2 部分中的 Content-Type 标注了第 4 部分的格式\n\n\n## Http响应\n**浏览器显示：**\n\n1 协议/版本号 状态码 状态解释\n2 Key1: value1\n2 Key2: value2\n2 Content-Length: 17931\n2 Content-Type: text/html\n3\n4 要下载的内容\n\n\n**状态码要背，是服务器对浏览器说的话：**\n```\n1xx 不常用\n2xx 表示成功\n3xx 表示滚吧\n4xx 表示你丫错了\n5xx 表示好吧，我错了\n状态解释没什么用\n第 2 部分中的 Content-Type 标注了第 4 部分的格式\n第 2 部分中的 Content-Type 遵循 MIME 规范\n```\n\n**IP**\n- 一般默认情况下，hosts 文件里会有一行127.0.0.1 localhost，意思就是 localhost 指向 127.0.0.1，所以 localhost 也表示设备自己。\n- 路由会给自己分配一个好记的内网 IP，如 192.168.1.1\n\n\n**做一个服务器**\n```\ncd ~/Desktop; \nmkdir node-demo; \ncd node-demo\ntouch server.js\n编辑 server.js （下图为编辑内容）\nnode server.js 8888\n```\n另外开一个gitbash窗口输入以下内容，观察效果即可\n```\ncurl http://localhost:你的指定的端口/xxx \n```\n或者直接在浏览器输入\n```\nhttp://localhost:你的指定的端口/xxx \n```\n\n效果：\n```\n用户请求 / 时，返回 html 内容\n该 html 内容里面由一个 css link 和一个 script\ncss link 会请求 /style.css，返回 css 内容\nscript 会请求 /main.js，返回 js 内容\n请求 / /style.css /main.js 以外的路径，则一律返回 404 状态码\n```\n\n- 文件内容是有 HTTP 头中的 Content-Type 保证的。content-type后面的东西才有用\n- 输入路径的/xxx没有用，不能代表什么，不要被迷惑。\n- 如果server.js内加上以下内容，会得到hi%。这个 % 不是我们的内容，% 表示结尾。如果不喜欢，把 'Hi' 换成 'Hi\\n'。\n```\nresponse.write('Hi') \nresponse.end()   \n```","slug":"服务器","published":1,"updated":"2018-05-03T11:31:23.944Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjho6oanr000av4vm0yjlpki5","content":"<h2 id=\"Http请求\"><a href=\"#Http请求\" class=\"headerlink\" title=\"Http请求\"></a>Http请求</h2><p>请求一般是get和post</p>\n<p><strong>输入：curl -s -v -H “Frank: xxx” – “<a href=\"https://www.baidu.com&quot;\" target=\"_blank\" rel=\"noopener\">https://www.baidu.com&quot;</a></strong></p>\n<p><strong>浏览器显示：</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET / HTTP/1.1</span><br><span class=\"line\">Host: www.baidu.com</span><br><span class=\"line\">User-Agent: curl/7.54.0</span><br><span class=\"line\">Accept: */*</span><br><span class=\"line\">Frank: xxx</span><br></pre></td></tr></table></figure></p>\n<p><strong>输入：curl -X POST -s -v -H “Frank: xxx” – “<a href=\"https://www.baidu.com&quot;\" target=\"_blank\" rel=\"noopener\">https://www.baidu.com&quot;</a></strong></p>\n<p><strong>浏览器显示：</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST / HTTP/1.1</span><br><span class=\"line\">Host: www.baidu.com</span><br><span class=\"line\">User-Agent: curl/7.54.0</span><br><span class=\"line\">Accept: */*</span><br><span class=\"line\">Frank: xxx</span><br></pre></td></tr></table></figure></p>\n<p><strong>浏览器显示格式：</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1动词 路径 协议/版本</span><br><span class=\"line\">2Key1: value1</span><br><span class=\"line\">2Key2: value2</span><br><span class=\"line\">2Key3: value3</span><br><span class=\"line\">2Content-Type: application/x-www-form-urlencoded</span><br><span class=\"line\">2Host: www.baidu.com</span><br><span class=\"line\">2User-Agent: curl/7.54.0</span><br><span class=\"line\">3</span><br><span class=\"line\">4要上传的数据</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>请求最多包含四部分，最少包含三部分。（也就是说第四部分可以为空）</li>\n<li>第三部分永远都是一个回车（\\n）</li>\n<li>动词有 GET  POST  PUT  PATCH  DELETE  HEAD  OPTIONS 等</li>\n<li>这里的路径包括「查询参数」，但不包括「锚点」</li>\n<li>如果你没有写路径，那么路径默认为 /</li>\n<li>第 2 部分中的 Content-Type 标注了第 4 部分的格式</li>\n</ul>\n<h2 id=\"Http响应\"><a href=\"#Http响应\" class=\"headerlink\" title=\"Http响应\"></a>Http响应</h2><p><strong>浏览器显示：</strong></p>\n<p>1 协议/版本号 状态码 状态解释<br>2 Key1: value1<br>2 Key2: value2<br>2 Content-Length: 17931<br>2 Content-Type: text/html<br>3<br>4 要下载的内容</p>\n<p><strong>状态码要背，是服务器对浏览器说的话：</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1xx 不常用</span><br><span class=\"line\">2xx 表示成功</span><br><span class=\"line\">3xx 表示滚吧</span><br><span class=\"line\">4xx 表示你丫错了</span><br><span class=\"line\">5xx 表示好吧，我错了</span><br><span class=\"line\">状态解释没什么用</span><br><span class=\"line\">第 2 部分中的 Content-Type 标注了第 4 部分的格式</span><br><span class=\"line\">第 2 部分中的 Content-Type 遵循 MIME 规范</span><br></pre></td></tr></table></figure></p>\n<p><strong>IP</strong></p>\n<ul>\n<li>一般默认情况下，hosts 文件里会有一行127.0.0.1 localhost，意思就是 localhost 指向 127.0.0.1，所以 localhost 也表示设备自己。</li>\n<li>路由会给自己分配一个好记的内网 IP，如 192.168.1.1</li>\n</ul>\n<p><strong>做一个服务器</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/Desktop; </span><br><span class=\"line\">mkdir node-demo; </span><br><span class=\"line\">cd node-demo</span><br><span class=\"line\">touch server.js</span><br><span class=\"line\">编辑 server.js （下图为编辑内容）</span><br><span class=\"line\">node server.js 8888</span><br></pre></td></tr></table></figure></p>\n<p>另外开一个gitbash窗口输入以下内容，观察效果即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://localhost:你的指定的端口/xxx</span><br></pre></td></tr></table></figure></p>\n<p>或者直接在浏览器输入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:你的指定的端口/xxx</span><br></pre></td></tr></table></figure></p>\n<p>效果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用户请求 / 时，返回 html 内容</span><br><span class=\"line\">该 html 内容里面由一个 css link 和一个 script</span><br><span class=\"line\">css link 会请求 /style.css，返回 css 内容</span><br><span class=\"line\">script 会请求 /main.js，返回 js 内容</span><br><span class=\"line\">请求 / /style.css /main.js 以外的路径，则一律返回 404 状态码</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>文件内容是有 HTTP 头中的 Content-Type 保证的。content-type后面的东西才有用</li>\n<li>输入路径的/xxx没有用，不能代表什么，不要被迷惑。</li>\n<li>如果server.js内加上以下内容，会得到hi%。这个 % 不是我们的内容，% 表示结尾。如果不喜欢，把 ‘Hi’ 换成 ‘Hi\\n’。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.write(&apos;Hi&apos;) </span><br><span class=\"line\">response.end()</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Http请求\"><a href=\"#Http请求\" class=\"headerlink\" title=\"Http请求\"></a>Http请求</h2><p>请求一般是get和post</p>\n<p><strong>输入：curl -s -v -H “Frank: xxx” – “<a href=\"https://www.baidu.com&quot;\" target=\"_blank\" rel=\"noopener\">https://www.baidu.com&quot;</a></strong></p>\n<p><strong>浏览器显示：</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET / HTTP/1.1</span><br><span class=\"line\">Host: www.baidu.com</span><br><span class=\"line\">User-Agent: curl/7.54.0</span><br><span class=\"line\">Accept: */*</span><br><span class=\"line\">Frank: xxx</span><br></pre></td></tr></table></figure></p>\n<p><strong>输入：curl -X POST -s -v -H “Frank: xxx” – “<a href=\"https://www.baidu.com&quot;\" target=\"_blank\" rel=\"noopener\">https://www.baidu.com&quot;</a></strong></p>\n<p><strong>浏览器显示：</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST / HTTP/1.1</span><br><span class=\"line\">Host: www.baidu.com</span><br><span class=\"line\">User-Agent: curl/7.54.0</span><br><span class=\"line\">Accept: */*</span><br><span class=\"line\">Frank: xxx</span><br></pre></td></tr></table></figure></p>\n<p><strong>浏览器显示格式：</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1动词 路径 协议/版本</span><br><span class=\"line\">2Key1: value1</span><br><span class=\"line\">2Key2: value2</span><br><span class=\"line\">2Key3: value3</span><br><span class=\"line\">2Content-Type: application/x-www-form-urlencoded</span><br><span class=\"line\">2Host: www.baidu.com</span><br><span class=\"line\">2User-Agent: curl/7.54.0</span><br><span class=\"line\">3</span><br><span class=\"line\">4要上传的数据</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>请求最多包含四部分，最少包含三部分。（也就是说第四部分可以为空）</li>\n<li>第三部分永远都是一个回车（\\n）</li>\n<li>动词有 GET  POST  PUT  PATCH  DELETE  HEAD  OPTIONS 等</li>\n<li>这里的路径包括「查询参数」，但不包括「锚点」</li>\n<li>如果你没有写路径，那么路径默认为 /</li>\n<li>第 2 部分中的 Content-Type 标注了第 4 部分的格式</li>\n</ul>\n<h2 id=\"Http响应\"><a href=\"#Http响应\" class=\"headerlink\" title=\"Http响应\"></a>Http响应</h2><p><strong>浏览器显示：</strong></p>\n<p>1 协议/版本号 状态码 状态解释<br>2 Key1: value1<br>2 Key2: value2<br>2 Content-Length: 17931<br>2 Content-Type: text/html<br>3<br>4 要下载的内容</p>\n<p><strong>状态码要背，是服务器对浏览器说的话：</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1xx 不常用</span><br><span class=\"line\">2xx 表示成功</span><br><span class=\"line\">3xx 表示滚吧</span><br><span class=\"line\">4xx 表示你丫错了</span><br><span class=\"line\">5xx 表示好吧，我错了</span><br><span class=\"line\">状态解释没什么用</span><br><span class=\"line\">第 2 部分中的 Content-Type 标注了第 4 部分的格式</span><br><span class=\"line\">第 2 部分中的 Content-Type 遵循 MIME 规范</span><br></pre></td></tr></table></figure></p>\n<p><strong>IP</strong></p>\n<ul>\n<li>一般默认情况下，hosts 文件里会有一行127.0.0.1 localhost，意思就是 localhost 指向 127.0.0.1，所以 localhost 也表示设备自己。</li>\n<li>路由会给自己分配一个好记的内网 IP，如 192.168.1.1</li>\n</ul>\n<p><strong>做一个服务器</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/Desktop; </span><br><span class=\"line\">mkdir node-demo; </span><br><span class=\"line\">cd node-demo</span><br><span class=\"line\">touch server.js</span><br><span class=\"line\">编辑 server.js （下图为编辑内容）</span><br><span class=\"line\">node server.js 8888</span><br></pre></td></tr></table></figure></p>\n<p>另外开一个gitbash窗口输入以下内容，观察效果即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://localhost:你的指定的端口/xxx</span><br></pre></td></tr></table></figure></p>\n<p>或者直接在浏览器输入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:你的指定的端口/xxx</span><br></pre></td></tr></table></figure></p>\n<p>效果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用户请求 / 时，返回 html 内容</span><br><span class=\"line\">该 html 内容里面由一个 css link 和一个 script</span><br><span class=\"line\">css link 会请求 /style.css，返回 css 内容</span><br><span class=\"line\">script 会请求 /main.js，返回 js 内容</span><br><span class=\"line\">请求 / /style.css /main.js 以外的路径，则一律返回 404 状态码</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>文件内容是有 HTTP 头中的 Content-Type 保证的。content-type后面的东西才有用</li>\n<li>输入路径的/xxx没有用，不能代表什么，不要被迷惑。</li>\n<li>如果server.js内加上以下内容，会得到hi%。这个 % 不是我们的内容，% 表示结尾。如果不喜欢，把 ‘Hi’ 换成 ‘Hi\\n’。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.write(&apos;Hi&apos;) </span><br><span class=\"line\">response.end()</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"配置github","date":"2018-03-23T01:11:05.000Z","_content":"**配置 GitHub**\n```\n1.进入 https://github.com/settings/keys\n2.如果页面里已经有一些 key，就点「delete」按钮把这些 key 全删掉。如果没有，就往下看\n3.点击 New SSH key，你需要输入 Title 和 Key，但是你现在没有 key，往下看\n4.打开 Git Bash\n5.复制并运行 rm -rf ~/.ssh/* 把现有的 ssh key 都删掉，这句命令行如果你多打一个空格，可能就要重装系统了，建议复制运行。\n6.运行 ssh-keygen -t rsa -b 4096 -C \"你的邮箱\"，注意填写你的邮箱！\n7.按回车三次\n8.运行 cat ~/.ssh/id_rsa.pub，得到一串东西，完整的复制这串东西\n9.回到上面第 3 步的页面，在 Title 输入「我的第一个 key」\n10.在 Key 里粘贴刚刚你你复制的那串东西\n11.点击 Add SSH key\n12.回到 Git Bash\n13.运行 ssh -T git@github.com\n14.输入 yes 回车\n```\n\n然后如果你看到 Permission denied (publickey). 就说明你失败了，请回到第 1 步重来，是的，回到第 1 步重来；如果你看到 Hi xxx! You've successfully authenticated, but GitHub does not provide shell access. 就说明你成功了！\n\n```\n- 一台电脑只需要一个 SSH key\n- 一个 SSH key 可以访问你的所有仓库，即使你有 1000000 个仓库，都没问题\n- 如果你新买了电脑，就在新电脑上重新生成一个 SSH key，把这个 key 也上传到 GitHub，它可以和之前的 key 共存在 GitHub 上\n- 如果你把 key 从电脑上删除了，重新生成一个 key 即可，替换之前的 key\n```\n\n**配置 git**\n```\ngit config --global user.name 你的英文名\ngit config --global user.email 你的邮箱\ngit config --global push.default matching\ngit config --global core.quotepath false\ngit config --global core.editor \"vim\"\n```\n\n五句话，依次运行。不执行的话，电脑可能会爆炸。","source":"_posts/配置github.md","raw":"---\ntitle: 配置github\ndate: 2018-03-23 9:11:05\ntags:\n---\n**配置 GitHub**\n```\n1.进入 https://github.com/settings/keys\n2.如果页面里已经有一些 key，就点「delete」按钮把这些 key 全删掉。如果没有，就往下看\n3.点击 New SSH key，你需要输入 Title 和 Key，但是你现在没有 key，往下看\n4.打开 Git Bash\n5.复制并运行 rm -rf ~/.ssh/* 把现有的 ssh key 都删掉，这句命令行如果你多打一个空格，可能就要重装系统了，建议复制运行。\n6.运行 ssh-keygen -t rsa -b 4096 -C \"你的邮箱\"，注意填写你的邮箱！\n7.按回车三次\n8.运行 cat ~/.ssh/id_rsa.pub，得到一串东西，完整的复制这串东西\n9.回到上面第 3 步的页面，在 Title 输入「我的第一个 key」\n10.在 Key 里粘贴刚刚你你复制的那串东西\n11.点击 Add SSH key\n12.回到 Git Bash\n13.运行 ssh -T git@github.com\n14.输入 yes 回车\n```\n\n然后如果你看到 Permission denied (publickey). 就说明你失败了，请回到第 1 步重来，是的，回到第 1 步重来；如果你看到 Hi xxx! You've successfully authenticated, but GitHub does not provide shell access. 就说明你成功了！\n\n```\n- 一台电脑只需要一个 SSH key\n- 一个 SSH key 可以访问你的所有仓库，即使你有 1000000 个仓库，都没问题\n- 如果你新买了电脑，就在新电脑上重新生成一个 SSH key，把这个 key 也上传到 GitHub，它可以和之前的 key 共存在 GitHub 上\n- 如果你把 key 从电脑上删除了，重新生成一个 key 即可，替换之前的 key\n```\n\n**配置 git**\n```\ngit config --global user.name 你的英文名\ngit config --global user.email 你的邮箱\ngit config --global push.default matching\ngit config --global core.quotepath false\ngit config --global core.editor \"vim\"\n```\n\n五句话，依次运行。不执行的话，电脑可能会爆炸。","slug":"配置github","published":1,"updated":"2018-05-16T15:04:52.306Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjho6oanv000bv4vmt4iao4t4","content":"<p><strong>配置 GitHub</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.进入 https://github.com/settings/keys</span><br><span class=\"line\">2.如果页面里已经有一些 key，就点「delete」按钮把这些 key 全删掉。如果没有，就往下看</span><br><span class=\"line\">3.点击 New SSH key，你需要输入 Title 和 Key，但是你现在没有 key，往下看</span><br><span class=\"line\">4.打开 Git Bash</span><br><span class=\"line\">5.复制并运行 rm -rf ~/.ssh/* 把现有的 ssh key 都删掉，这句命令行如果你多打一个空格，可能就要重装系统了，建议复制运行。</span><br><span class=\"line\">6.运行 ssh-keygen -t rsa -b 4096 -C &quot;你的邮箱&quot;，注意填写你的邮箱！</span><br><span class=\"line\">7.按回车三次</span><br><span class=\"line\">8.运行 cat ~/.ssh/id_rsa.pub，得到一串东西，完整的复制这串东西</span><br><span class=\"line\">9.回到上面第 3 步的页面，在 Title 输入「我的第一个 key」</span><br><span class=\"line\">10.在 Key 里粘贴刚刚你你复制的那串东西</span><br><span class=\"line\">11.点击 Add SSH key</span><br><span class=\"line\">12.回到 Git Bash</span><br><span class=\"line\">13.运行 ssh -T git@github.com</span><br><span class=\"line\">14.输入 yes 回车</span><br></pre></td></tr></table></figure></p>\n<p>然后如果你看到 Permission denied (publickey). 就说明你失败了，请回到第 1 步重来，是的，回到第 1 步重来；如果你看到 Hi xxx! You’ve successfully authenticated, but GitHub does not provide shell access. 就说明你成功了！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 一台电脑只需要一个 SSH key</span><br><span class=\"line\">- 一个 SSH key 可以访问你的所有仓库，即使你有 1000000 个仓库，都没问题</span><br><span class=\"line\">- 如果你新买了电脑，就在新电脑上重新生成一个 SSH key，把这个 key 也上传到 GitHub，它可以和之前的 key 共存在 GitHub 上</span><br><span class=\"line\">- 如果你把 key 从电脑上删除了，重新生成一个 key 即可，替换之前的 key</span><br></pre></td></tr></table></figure>\n<p><strong>配置 git</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name 你的英文名</span><br><span class=\"line\">git config --global user.email 你的邮箱</span><br><span class=\"line\">git config --global push.default matching</span><br><span class=\"line\">git config --global core.quotepath false</span><br><span class=\"line\">git config --global core.editor &quot;vim&quot;</span><br></pre></td></tr></table></figure></p>\n<p>五句话，依次运行。不执行的话，电脑可能会爆炸。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>配置 GitHub</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.进入 https://github.com/settings/keys</span><br><span class=\"line\">2.如果页面里已经有一些 key，就点「delete」按钮把这些 key 全删掉。如果没有，就往下看</span><br><span class=\"line\">3.点击 New SSH key，你需要输入 Title 和 Key，但是你现在没有 key，往下看</span><br><span class=\"line\">4.打开 Git Bash</span><br><span class=\"line\">5.复制并运行 rm -rf ~/.ssh/* 把现有的 ssh key 都删掉，这句命令行如果你多打一个空格，可能就要重装系统了，建议复制运行。</span><br><span class=\"line\">6.运行 ssh-keygen -t rsa -b 4096 -C &quot;你的邮箱&quot;，注意填写你的邮箱！</span><br><span class=\"line\">7.按回车三次</span><br><span class=\"line\">8.运行 cat ~/.ssh/id_rsa.pub，得到一串东西，完整的复制这串东西</span><br><span class=\"line\">9.回到上面第 3 步的页面，在 Title 输入「我的第一个 key」</span><br><span class=\"line\">10.在 Key 里粘贴刚刚你你复制的那串东西</span><br><span class=\"line\">11.点击 Add SSH key</span><br><span class=\"line\">12.回到 Git Bash</span><br><span class=\"line\">13.运行 ssh -T git@github.com</span><br><span class=\"line\">14.输入 yes 回车</span><br></pre></td></tr></table></figure></p>\n<p>然后如果你看到 Permission denied (publickey). 就说明你失败了，请回到第 1 步重来，是的，回到第 1 步重来；如果你看到 Hi xxx! You’ve successfully authenticated, but GitHub does not provide shell access. 就说明你成功了！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 一台电脑只需要一个 SSH key</span><br><span class=\"line\">- 一个 SSH key 可以访问你的所有仓库，即使你有 1000000 个仓库，都没问题</span><br><span class=\"line\">- 如果你新买了电脑，就在新电脑上重新生成一个 SSH key，把这个 key 也上传到 GitHub，它可以和之前的 key 共存在 GitHub 上</span><br><span class=\"line\">- 如果你把 key 从电脑上删除了，重新生成一个 key 即可，替换之前的 key</span><br></pre></td></tr></table></figure>\n<p><strong>配置 git</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name 你的英文名</span><br><span class=\"line\">git config --global user.email 你的邮箱</span><br><span class=\"line\">git config --global push.default matching</span><br><span class=\"line\">git config --global core.quotepath false</span><br><span class=\"line\">git config --global core.editor &quot;vim&quot;</span><br></pre></td></tr></table></figure></p>\n<p>五句话，依次运行。不执行的话，电脑可能会爆炸。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}